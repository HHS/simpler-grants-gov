import logging
import uuid
import zipfile
from typing import Self

from sqlalchemy import select

import src.adapters.db as db
import tests.src.db.models.factories as factories
from src.constants.lookup_constants import OpportunityStatus, ApplicationStatus
from src.constants.static_role_values import ORG_ADMIN, ORG_MEMBER
from src.db.models.competition_models import Competition, Application, ApplicationSubmission
from src.db.models.entity_models import Organization
from src.db.models.opportunity_models import (
    CurrentOpportunitySummary,
    Opportunity,
    OpportunitySummary,
)
from src.db.models.user_models import Role, User, OrganizationUserRole
from src.services.applications.application_validation import validate_application_form, ApplicationAction
from src.util import file_util
from tests.lib.seed_data_utils import CompetitionContainer

logger = logging.getLogger(__name__)

# We use build here and not create so that we just
# made a SQLAlchemy model, but it's not automatically inserted
# that way we can merge the records in below.
#
# Any values generated by the factory will change each time
# this code runs. If that's an issue for a particular value, statically define it.
# We do that with all primary keys so merges will work.

#############################################################
# Organization Setup
#############################################################

###############################
# Simple organization #1
###############################

SAM_GOV_ENTITY1 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("e7b4f0d9-a151-4c16-abfd-bf77224ed72a"),
    legal_business_name="Sally's Soup Emporium",
    uei="FAKEUEI11111",
)

ORG1 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("47d95649-c70d-44d9-ae78-68bf848e32f8"),
    sam_gov_entity=SAM_GOV_ENTITY1,
)

###############################
# Simple organization #2
###############################

SAM_GOV_ENTITY2 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("d5bcaa08-ff13-4bb9-a1af-7cfeef56c720"),
    legal_business_name="Fred's Fabric Hut",
    uei="FAKEUEI22222",
)

ORG2 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("50a7692e-743b-4c7b-bdb0-46ae087db33c"),
    sam_gov_entity=SAM_GOV_ENTITY2,
)

###############################
# Simple organization #3
###############################

SAM_GOV_ENTITY3 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("6995737d-80f2-4de4-a035-45b6219a6bd6"),
    # We want a really long name for testing
    legal_business_name="Michelangelo's Moderately Malevolent Moving Marketplace",
    uei="FAKEUEI33333",
)

ORG3 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("71507bdc-fa0e-44a7-b17c-d79d15320476"),
    sam_gov_entity=SAM_GOV_ENTITY3,
)


class UserBuilder:
    """Builder class for setting up a user for local development"""

    def __init__(self, user_id: uuid.UUID, db_session: db.Session, scenario_name: str) -> None:
        self.user: User = db_session.merge(factories.UserFactory.build(user_id=user_id), load=True)
        self.db_session = db_session
        self.scenario_name = scenario_name

        self.link_external_id = None
        self.api_key_id = None

    def with_oauth_login(self, external_user_id: str) -> Self:
        """Add an oauth login record that you can use to login as a user

        For example, if you passed in "my_example_user", you could
        manually login to that user by typing "my_example_user" into
        the Mock OAuth login page.
        """
        external_user = self.user.linked_login_gov_external_user
        if external_user is None:
            external_user = factories.LinkExternalUserFactory.build(user=self.user)

        external_user.external_user_id = external_user_id
        self.db_session.add(external_user)

        self.link_external_id = external_user_id
        return self

    def with_api_key(self, key_id: str) -> Self:
        # See if we previously setup this API key
        user_api_key = None
        for key in self.user.api_keys:
            if key.key_id == key_id:
                user_api_key = key
                break

        if user_api_key is None:
            user_api_key = factories.UserApiKeyFactory.build(user=self.user)

        user_api_key.key_id = key_id

        self.db_session.add(user_api_key)

        self.api_key_id = key_id
        return self

    def with_organization(self, organization: Organization, roles: list[Role]) -> Self:
        # First see if this user is already a member of the organization provided
        org_user = None
        for organization_user in self.user.organization_users:
            if organization_user.organization_id == organization.organization_id:
                org_user = organization_user
                break

        if org_user is None:
            org_user = factories.OrganizationUserFactory.build(
                user=self.user, organization=organization
            )
            self.db_session.add(org_user)

        organization_user_roles = []
        for role in roles:
            organization_user_roles.append(OrganizationUserRole(
                organization_user=org_user, role_id=role.role_id
            ))

        org_user.organization_user_roles = organization_user_roles

        return self

    def build(self) -> User:
        logger.info(
            f"Updating {self.scenario_name}: '{self.link_external_id}' with X-API-Key: '{self.api_key_id}'"
        )
        return self.user


def _build_organizations_and_users(db_session: db.Session, competition_container: CompetitionContainer) -> None:
    logger.info("Creating/updating organizations and users")
    ############################################
    # Organization 1
    ############################################
    db_session.merge(SAM_GOV_ENTITY1, load=True)
    org1 = db_session.merge(ORG1, load=True)

    ############################################
    # Organization 2
    ############################################
    db_session.merge(SAM_GOV_ENTITY2, load=True)
    org2 = db_session.merge(ORG2, load=True)

    ############################################
    # Organization 3
    ############################################
    db_session.merge(SAM_GOV_ENTITY3, load=True)
    org3 = db_session.merge(ORG3, load=True)

    ##############################################################
    # Users
    ##############################################################
    user_scenarios = []

    ###############################
    # User without organizations
    ###############################
    user_no_orgs = (
        UserBuilder(
            uuid.UUID("a3f77afe-c293-414b-a2c0-53c1be5f2936"), db_session, "user with no orgs"
        )
        .with_oauth_login("no_org_user")
        .with_api_key("no_org_user_key")
        .build()
    )

    user_scenarios.append("no_org_user - Individual user (no organizations)")

    _add_saved_opportunities(user_no_orgs, db_session)
    _add_saved_searches(user_no_orgs, db_session)

    ###############################
    # User with a single organization
    ###############################
    (
        UserBuilder(
            uuid.UUID("f15c7491-7ebc-4f4f-8de6-3ac0594d9c63"), db_session, "user with one org"
        )
        .with_oauth_login("one_org_user")
        .with_api_key("one_org_user_key")
        .with_organization(org1, roles=[ORG_ADMIN])
        .build()
    )

    user_scenarios.append("one_org_user - Organization admin (Sally's Soup Emporium)")

    ###############################
    # User with two organizations
    ###############################
    UserBuilder(
        uuid.UUID("0f4ae584-c310-472d-9d6c-57201b5f84cc"), db_session, "user with two orgs"
    ).with_oauth_login("two_org_user").with_api_key("two_orgs_user_key").with_organization(
        org1, roles=[ORG_ADMIN]
    ).with_organization(
        org2, roles=[ORG_ADMIN]
    ).build()

    user_scenarios.append("two_org_user - Organization admin (both organizations)")

    ###############################
    # User as organization member (not admin)
    ###############################

    UserBuilder(
        uuid.UUID("b1c2d3e4-f5a6-4b7c-8d9e-0f1a2b3c4d5e"), db_session, "user as org member"
    ).with_oauth_login("org_member_user").with_api_key("org_member_user_key").with_organization(org1, roles=[ORG_MEMBER]).build()


    user_scenarios.append("org_member_user - Organization member (Sally's Soup Emporium)")

    ###############################
    # User with mixed organization roles
    ###############################

    UserBuilder(
        uuid.UUID("f5a6b7c8-d9e0-4f1a-2b3c-4d5e6f7a8b9c"),
        db_session,
        "user with mixed org roles",
    ).with_oauth_login("mixed_roles_user").with_api_key("mixed_roles_user_key").with_organization(org1, roles=[ORG_ADMIN]).with_organization(org2, roles=[ORG_MEMBER]).build()


    user_scenarios.append("mixed_roles_user - Admin of ORG1, Member of ORG2")

    ###############################
    # User with many applications across orgs
    ###############################

    (UserBuilder(
        uuid.UUID("5b4807c5-57d4-4867-b722-1658b47c59ba"),
        db_session,
        "user with many different applications"
    ).with_oauth_login("many_app_user")
     .with_api_key("many_app_user_key")
     .with_organization(org1, roles=[ORG_ADMIN])
     .with_organization(org2, roles=[ORG_ADMIN])
     .with_organization(org3, roles=[ORG_ADMIN])
     .build()
    )

    _add_application(competition_container.competition_with_all_forms, org3)

    # Log summary of all created user scenarios
    logger.info("=== USER SCENARIOS SUMMARY ===")
    logger.info(f"Created {len(user_scenarios)} user scenarios with role-based access:")
    for scenario in user_scenarios:
        logger.info(f"â€¢ {scenario}")


def _add_saved_opportunities(user: User, db_session: db.Session, count: int = 5) -> None:
    # Grab some recently made opportunities
    opportunities: list = (
        db_session.execute(
            select(Opportunity)
            .join(CurrentOpportunitySummary)
            .join(OpportunitySummary)
            .where(
                CurrentOpportunitySummary.opportunity_status.in_(
                    [OpportunityStatus.POSTED, OpportunityStatus.FORECASTED]
                )
            )
            .order_by(OpportunitySummary.close_date.asc())
            .limit(40)
        )
        .scalars()
        .all()
    )

    current_saved_opportunity_ids = {o.opportunity_id for o in user.saved_opportunities}

    added_saved_opps_count = 0
    for opportunity in opportunities:
        if added_saved_opps_count >= count:
            break
        # If they already have that opportunity ID saved, don't try to add it again
        if opportunity.opportunity_id in current_saved_opportunity_ids:
            continue

        factories.UserSavedOpportunityFactory.create(user=user, opportunity=opportunity)
        added_saved_opps_count += 1


def _add_saved_searches(user: User, db_session: db.Session, count: int = 2) -> None:
    # Grab some opportunity IDs
    # These won't realistically be something we would have returned
    # for these search, but just to have them line up with real opportunities
    opportunity_ids: list = (
        db_session.execute(
            select(Opportunity.opportunity_id).join(CurrentOpportunitySummary).limit(25)
        )
        .scalars()
        .all()
    )

    for _ in range(count):
        word = factories.fake.word()
        factories.UserSavedSearchFactory.create(
            user=user,
            name=f"Saved search '{word}'",
            search_query={
                "query": word,
                "format": "json",
                "filters": {"opportunity_status": {"one_of": ["forecasted", "posted"]}},
                "pagination": {
                    "page_size": 25,
                    "sort_order": [
                        {"order_by": "relevancy", "sort_direction": "descending"},
                        {"order_by": "close_date", "sort_direction": "ascending"},
                    ],
                    "page_offset": 1,
                },
                "query_operator": "AND",
            },
            searched_opportunity_ids=opportunity_ids,
        )


def _add_application(competition: Competition, organization: Organization | None, application_status: ApplicationStatus = ApplicationStatus.IN_PROGRESS) -> Application:
    app_params: dict = {
        "competition": competition,
        "application_status": application_status,
    }
    if organization:
        app_params["organization"] = organization

    application = factories.ApplicationFactory.create(**app_params)
    print(application.application_id)

    # This bit is mostly copied from the start application endpoint
    # and at least sets up the application forms with prepopulation run
    for competition_form in competition.competition_forms:
        application_form = factories.ApplicationFormFactory.create(application=application, competition_form=competition_form, application_response={})

        validate_application_form(application_form, ApplicationAction.START)

    # We make a very very rough approximation of what an application submission
    # looks like. We make a ZIP file with roughly the files we'd expect in it
    # although they won't be PDFs or properly formatted.
    if application_status == ApplicationStatus.ACCEPTED:
        s3_path = f"s3://local-mock-public-bucket/applications/{application.application_id}/submissions/{uuid.uuid4()}/submission.zip"
        with file_util.open_stream(s3_path, "wb") as outfile:
            with zipfile.ZipFile(outfile, "w") as submission_zip:

                # Create a dummy manifest file
                with submission_zip.open("manifest.txt", "w") as manifest_file:
                    manifest_file.write(f"Manifest for Grant Application {application.application_id}".encode("utf-8"))

                # Add a file for each application form
                # Note we make these text files as even a very simple
                # PDF is quite complex
                for app_form in application.application_forms:
                    with submission_zip.open(f"{app_form.form.short_form_name}.txt", "w") as form_file:
                        form_file.write(str(app_form.application_response).encode("utf-8"))

                # Add some random attachments
                with submission_zip.open("dummy-attachment-1.txt", "w") as dummy_attachment:
                    dummy_attachment.write(b"This is an attachment file")

                with submission_zip.open("dummy-attachment-2.txt", "w") as dummy_attachment:
                    dummy_attachment.write(b"This is a different attachment file")

        factories.ApplicationSubmissionFactory(application=application, file_location=s3_path, file_contents="SKIP")


    return application
