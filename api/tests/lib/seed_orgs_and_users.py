import logging
import uuid

from sqlalchemy import select

import src.adapters.db as db
import tests.src.db.models.factories as factories
from src.constants.lookup_constants import OpportunityStatus
from src.db.models.opportunity_models import (
    CurrentOpportunitySummary,
    Opportunity,
    OpportunitySummary,
)
from src.db.models.user_models import User

logger = logging.getLogger(__name__)

# We use build here and not create so that we just
# made a SQLAlchemy model, but it's not automatically inserted
# that way we can merge the records in below.
#
# Any values generated by the factory will change each time
# this code runs. If that's an issue for a particular value, statically define it.
# We do that with all primary keys so merges will work.

#############################################################
# Organization Setup
#############################################################

###############################
# Simple organization #1
###############################

SAM_GOV_ENTITY1 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("e7b4f0d9-a151-4c16-abfd-bf77224ed72a"),
    legal_business_name="Sally's Soup Emporium",
    uei="FAKEUEI11111",
)

ORG1 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("47d95649-c70d-44d9-ae78-68bf848e32f8"),
    sam_gov_entity=SAM_GOV_ENTITY1,
)

SAM_GOV_ENTITY2 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("d5bcaa08-ff13-4bb9-a1af-7cfeef56c720"),
    legal_business_name="Fred's Fabric Hut",
    uei="FAKEUEI22222",
)

ORG2 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("50a7692e-743b-4c7b-bdb0-46ae087db33c"),
    sam_gov_entity=SAM_GOV_ENTITY2,
)

###############################
# Simple organization #2
###############################

#############################################################
# User Setup
#############################################################

###############################
# User without organizations
###############################
USER_NO_ORGS = factories.UserFactory.build(
    user_id=uuid.UUID("a3f77afe-c293-414b-a2c0-53c1be5f2936")
)

LINK_USER_NO_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("786218f1-433e-4f30-b14b-ab9c1d170ca3"),
    external_user_id="no_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_NO_ORGS,
)

###############################
# User with a single organization
###############################
USER_ONE_ORG = factories.UserFactory.build(
    user_id=uuid.UUID("f15c7491-7ebc-4f4f-8de6-3ac0594d9c63")
)

LINK_USER_ONE_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("357cdff0-77a5-4e95-8de0-98f5e7e98bda"),
    external_user_id="one_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_ONE_ORG,
)

USER_ONE_ORG_ORG_USER1 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("3ab87af3-66d3-4a44-9eb1-7da598ffb05b"),
    organization=ORG1,
    user=USER_ONE_ORG,
    is_organization_owner=True,
)

###############################
# User with two organizations
###############################
USER_TWO_ORGS = factories.UserFactory.build(
    user_id=uuid.UUID("0f4ae584-c310-472d-9d6c-57201b5f84cc")
)

LINK_USER_TWO_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("11aa7e08-e5ab-4c32-a25a-4583330297fa"),
    external_user_id="two_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_TWO_ORGS,
)

USER_TWO_ORG_ORG_USER1 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("d0203570-863e-40b7-a2f9-b85020eb7e65"),
    organization=ORG1,
    user=USER_TWO_ORGS,
    is_organization_owner=True,
)

USER_TWO_ORG_ORG_USER2 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("ac0cf16c-3702-4d25-8a0f-0428dc68af3e"),
    organization=ORG2,
    user=USER_TWO_ORGS,
    is_organization_owner=True,
)


def _build_organizations_and_users(db_session: db.Session) -> None:
    logger.info("Creating/updating organizations and users")
    ############################################
    # Simple Organization 1
    ############################################
    db_session.merge(SAM_GOV_ENTITY1, load=True)
    db_session.merge(ORG1, load=True)

    ############################################
    # Simple Organization 1
    ############################################
    db_session.merge(SAM_GOV_ENTITY2, load=True)
    db_session.merge(ORG2, load=True)

    ###############################
    # User without organizations
    ###############################
    logger.info(f"Updating user with no orgs: '{LINK_USER_NO_ORGS.external_user_id}'")
    user_no_orgs = db_session.merge(USER_NO_ORGS, load=True)
    db_session.merge(LINK_USER_NO_ORGS, load=True)

    _add_saved_opportunities(user_no_orgs, db_session)
    _add_saved_searches(user_no_orgs, db_session)

    ###############################
    # User with a single organization
    ###############################
    logger.info(f"Updating user with one org: '{LINK_USER_ONE_ORGS.external_user_id}'")
    db_session.merge(USER_ONE_ORG, load=True)
    db_session.merge(LINK_USER_ONE_ORGS, load=True)
    db_session.merge(USER_ONE_ORG_ORG_USER1, load=True)

    ###############################
    # User with two organizations
    ###############################
    logger.info(f"Updating user with two orgs: '{LINK_USER_TWO_ORGS.external_user_id}'")
    db_session.merge(USER_TWO_ORGS, load=True)
    db_session.merge(LINK_USER_TWO_ORGS, load=True)
    db_session.merge(USER_TWO_ORG_ORG_USER1, load=True)
    db_session.merge(USER_TWO_ORG_ORG_USER2, load=True)


def _add_saved_opportunities(user: User, db_session: db.Session, count: int = 5) -> None:
    # Grab some recently made opportunities
    opportunities: list = (
        db_session.execute(
            select(Opportunity)
            .join(CurrentOpportunitySummary)
            .join(OpportunitySummary)
            .where(
                CurrentOpportunitySummary.opportunity_status.in_(
                    [OpportunityStatus.POSTED, OpportunityStatus.FORECASTED]
                )
            )
            .order_by(OpportunitySummary.close_date.asc())
            .limit(40)
        )
        .scalars()
        .all()
    )

    current_saved_opportunity_ids = {o.opportunity_id for o in user.saved_opportunities}

    added_saved_opps_count = 0
    for opportunity in opportunities:
        if added_saved_opps_count >= count:
            break
        # If they already have that opportunity ID saved, don't try to add it again
        if opportunity.opportunity_id in current_saved_opportunity_ids:
            continue

        factories.UserSavedOpportunityFactory.create(user=user, opportunity=opportunity)
        added_saved_opps_count += 1


def _add_saved_searches(user: User, db_session: db.Session, count: int = 2) -> None:
    # Grab some opportunity IDs
    # These won't realistically be something we would have returned
    # for these search, but just to have them line up with real opportunities
    opportunity_ids: list = (
        db_session.execute(
            select(Opportunity.opportunity_id).join(CurrentOpportunitySummary).limit(25)
        )
        .scalars()
        .all()
    )

    for _ in range(count):
        word = factories.fake.word()
        factories.UserSavedSearchFactory.create(
            user=user,
            name=f"Saved search '{word}'",
            search_query={
                "query": word,
                "format": "json",
                "filters": {"opportunity_status": {"one_of": ["forecasted", "posted"]}},
                "pagination": {
                    "page_size": 25,
                    "sort_order": [
                        {"order_by": "relevancy", "sort_direction": "descending"},
                        {"order_by": "close_date", "sort_direction": "ascending"},
                    ],
                    "page_offset": 1,
                },
                "query_operator": "AND",
            },
            searched_opportunity_ids=opportunity_ids,
        )
