import logging
import uuid

from sqlalchemy import select

import src.adapters.db as db
import tests.src.db.models.factories as factories
from src.constants.lookup_constants import OpportunityStatus
from src.constants.static_role_values import ORG_ADMIN, ORG_MEMBER
from src.db.models.opportunity_models import (
    CurrentOpportunitySummary,
    Opportunity,
    OpportunitySummary,
)
from src.db.models.user_models import OrganizationUser, Role, User

logger = logging.getLogger(__name__)

# We use build here and not create so that we just
# made a SQLAlchemy model, but it's not automatically inserted
# that way we can merge the records in below.
#
# Any values generated by the factory will change each time
# this code runs. If that's an issue for a particular value, statically define it.
# We do that with all primary keys so merges will work.

#############################################################
# Organization Setup
#############################################################

###############################
# Simple organization #1
###############################

SAM_GOV_ENTITY1 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("e7b4f0d9-a151-4c16-abfd-bf77224ed72a"),
    legal_business_name="Sally's Soup Emporium",
    uei="FAKEUEI11111",
)

ORG1 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("47d95649-c70d-44d9-ae78-68bf848e32f8"),
    sam_gov_entity=SAM_GOV_ENTITY1,
)

SAM_GOV_ENTITY2 = factories.SamGovEntityFactory.build(
    sam_gov_entity_id=uuid.UUID("d5bcaa08-ff13-4bb9-a1af-7cfeef56c720"),
    legal_business_name="Fred's Fabric Hut",
    uei="FAKEUEI22222",
)

ORG2 = factories.OrganizationFactory.build(
    organization_id=uuid.UUID("50a7692e-743b-4c7b-bdb0-46ae087db33c"),
    sam_gov_entity=SAM_GOV_ENTITY2,
)

###############################
# Simple organization #2
###############################

#############################################################
# User Setup
#############################################################

###############################
# User without organizations
###############################
USER_NO_ORGS = factories.UserFactory.build(
    user_id=uuid.UUID("a3f77afe-c293-414b-a2c0-53c1be5f2936")
)

LINK_USER_NO_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("786218f1-433e-4f30-b14b-ab9c1d170ca3"),
    external_user_id="no_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_NO_ORGS,
)

API_KEY_USER_NO_ORGS = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("daff1e8b-fbdd-486d-a9bc-69ff8df10011"),
    key_id="no_org_user_key",
    user=USER_NO_ORGS,
)

###############################
# User with a single organization
###############################
USER_ONE_ORG = factories.UserFactory.build(
    user_id=uuid.UUID("f15c7491-7ebc-4f4f-8de6-3ac0594d9c63")
)

LINK_USER_ONE_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("357cdff0-77a5-4e95-8de0-98f5e7e98bda"),
    external_user_id="one_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_ONE_ORG,
)

API_KEY_USER_ONE_ORG = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("03db0a7e-d730-43c8-bf72-986fb7185acd"),
    key_id="one_org_user_key",
    user=USER_ONE_ORG,
)

USER_ONE_ORG_ORG_USER1 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("3ab87af3-66d3-4a44-9eb1-7da598ffb05b"),
    organization=ORG1,
    user=USER_ONE_ORG,
    is_organization_owner=True,  # Keep the flag for now, but don't use traits
)


###############################
# User with two organizations
###############################
USER_TWO_ORGS = factories.UserFactory.build(
    user_id=uuid.UUID("0f4ae584-c310-472d-9d6c-57201b5f84cc")
)

LINK_USER_TWO_ORGS = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("11aa7e08-e5ab-4c32-a25a-4583330297fa"),
    external_user_id="two_org_user",  # THIS IS WHAT WE USE TO LOGIN
    user=USER_TWO_ORGS,
)

API_KEY_USER_TWO_ORGS = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("5a3ac8f2-1b0b-4cf9-a8a5-e52bea67939b"),
    key_id="two_orgs_user_key",
    user=USER_TWO_ORGS,
)

USER_TWO_ORG_ORG_USER1 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("d0203570-863e-40b7-a2f9-b85020eb7e65"),
    organization=ORG1,
    user=USER_TWO_ORGS,
    is_organization_owner=True,
)

USER_TWO_ORG_ORG_USER2 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("ac0cf16c-3702-4d25-8a0f-0428dc68af3e"),
    organization=ORG2,
    user=USER_TWO_ORGS,
    is_organization_owner=True,
)


###############################
# User as organization member (not admin)
###############################
USER_ORG_MEMBER = factories.UserFactory.build(
    user_id=uuid.UUID("b1c2d3e4-f5a6-4b7c-8d9e-0f1a2b3c4d5e")
)

LINK_USER_ORG_MEMBER = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("c2d3e4f5-a6b7-4c8d-9e0f-1a2b3c4d5e6f"),
    external_user_id="org_member_user",
    user=USER_ORG_MEMBER,
)

API_KEY_USER_ORG_MEMBER = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("d3e4f5a6-b7c8-4d9e-0f1a-2b3c4d5e6f7a"),
    key_id="org_member_user_key",
    user=USER_ORG_MEMBER,
)

USER_ORG_MEMBER_ORG_USER = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("e4f5a6b7-c8d9-4e0f-1a2b-3c4d5e6f7a8b"),
    organization=ORG1,
    user=USER_ORG_MEMBER,
    is_organization_owner=False,
)

###############################
# User with mixed organization roles
###############################
USER_MIXED_ORG_ROLES = factories.UserFactory.build(
    user_id=uuid.UUID("f5a6b7c8-d9e0-4f1a-2b3c-4d5e6f7a8b9c")
)

LINK_USER_MIXED_ORG_ROLES = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("a6b7c8d9-e0f1-4a2b-3c4d-5e6f7a8b9c0d"),
    external_user_id="mixed_roles_user",
    user=USER_MIXED_ORG_ROLES,
)

API_KEY_USER_MIXED_ORG_ROLES = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("b7c8d9e0-f1a2-4b3c-4d5e-6f7a8b9c0d1e"),
    key_id="mixed_roles_user_key",
    user=USER_MIXED_ORG_ROLES,
)

# Admin of ORG1, Member of ORG2
USER_MIXED_ORG_ROLES_ORG_USER1 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("c8d9e0f1-a2b3-4c4d-5e6f-7a8b9c0d1e2f"),
    organization=ORG1,
    user=USER_MIXED_ORG_ROLES,
    is_organization_owner=True,
)

USER_MIXED_ORG_ROLES_ORG_USER2 = factories.OrganizationUserFactory.build(
    organization_user_id=uuid.UUID("d9e0f1a2-b3c4-4d5e-6f7a-8b9c0d1e2f3a"),
    organization=ORG2,
    user=USER_MIXED_ORG_ROLES,
    is_organization_owner=False,
)


###############################
# API-only user for local development
###############################
API_USER = factories.UserFactory.build(
    user_id=uuid.UUID("12345678-1234-5678-9abc-123456789abc")
)

LINK_API_USER = factories.LinkExternalUserFactory.build(
    link_external_user_id=uuid.UUID("87654321-4321-8765-cba9-987654321cba"),
    external_user_id="api_user",  # THIS IS WHAT WE USE TO LOGIN
    user=API_USER,
)

API_KEY_FOR_API_USER = factories.UserApiKeyFactory.build(
    api_key_id=uuid.UUID("abcdef12-3456-7890-abcd-ef1234567890"),
    key_id="local-dev-api-key",  # This is the key_id that will be used for X-API-KEY header
    key_name="Local Development API Key",
    user=API_USER,
)


def _assign_organization_role(
    db_session: db.Session, organization_user: OrganizationUser, role: Role
) -> None:
    """Helper function to assign a role to an organization user"""
    role_assignment = factories.OrganizationUserRoleFactory.build(
        organization_user=organization_user, role=role
    )
    db_session.merge(role_assignment, load=True)
    logger.info(
        f"Assigned role {role.role_id} to organization user {organization_user.organization_user_id}"
    )


def _build_organizations_and_users(db_session: db.Session) -> None:
    logger.info("Creating/updating organizations and users")
    ############################################
    # Simple Organization 1
    ############################################
    db_session.merge(SAM_GOV_ENTITY1, load=True)
    db_session.merge(ORG1, load=True)

    ############################################
    # Simple Organization 1
    ############################################
    db_session.merge(SAM_GOV_ENTITY2, load=True)
    db_session.merge(ORG2, load=True)

    ###############################
    # User without organizations
    ###############################
    logger.info(
        f"Updating user with no orgs: '{LINK_USER_NO_ORGS.external_user_id}' with X-API-Key: '{API_KEY_USER_NO_ORGS.key_id}'"
    )
    user_no_orgs = db_session.merge(USER_NO_ORGS, load=True)
    db_session.merge(LINK_USER_NO_ORGS, load=True)
    db_session.merge(API_KEY_USER_NO_ORGS, load=True)

    _add_saved_opportunities(user_no_orgs, db_session)
    _add_saved_searches(user_no_orgs, db_session)

    ###############################
    # User with a single organization
    ###############################
    logger.info(
        f"Updating user with one org: '{LINK_USER_ONE_ORGS.external_user_id}' with X-API-Key: '{API_KEY_USER_ONE_ORG.key_id}'"
    )
    db_session.merge(USER_ONE_ORG, load=True)
    db_session.merge(LINK_USER_ONE_ORGS, load=True)
    db_session.merge(API_KEY_USER_ONE_ORG, load=True)
    db_session.merge(USER_ONE_ORG_ORG_USER1, load=True)

    # Assign ORG_ADMIN role
    _assign_organization_role(db_session, USER_ONE_ORG_ORG_USER1, ORG_ADMIN)

    ###############################
    # User with two organizations
    ###############################
    logger.info(
        f"Updating user with two orgs: '{LINK_USER_TWO_ORGS.external_user_id}' with X-API-Key: '{API_KEY_USER_TWO_ORGS.key_id}'"
    )
    db_session.merge(USER_TWO_ORGS, load=True)
    db_session.merge(LINK_USER_TWO_ORGS, load=True)
    db_session.merge(API_KEY_USER_TWO_ORGS, load=True)
    db_session.merge(USER_TWO_ORG_ORG_USER1, load=True)
    db_session.merge(USER_TWO_ORG_ORG_USER2, load=True)

    # Assign ORG_ADMIN roles for both organizations
    _assign_organization_role(db_session, USER_TWO_ORG_ORG_USER1, ORG_ADMIN)
    _assign_organization_role(db_session, USER_TWO_ORG_ORG_USER2, ORG_ADMIN)

    ###############################
    # User as organization member (not admin)
    ###############################
    logger.info(
        f"Updating user as org member: '{LINK_USER_ORG_MEMBER.external_user_id}' with X-API-Key: '{API_KEY_USER_ORG_MEMBER.key_id}'"
    )
    db_session.merge(USER_ORG_MEMBER, load=True)
    db_session.merge(LINK_USER_ORG_MEMBER, load=True)
    db_session.merge(API_KEY_USER_ORG_MEMBER, load=True)
    db_session.merge(USER_ORG_MEMBER_ORG_USER, load=True)

    # Assign ORG_MEMBER role
    _assign_organization_role(db_session, USER_ORG_MEMBER_ORG_USER, ORG_MEMBER)

    ###############################
    # User with mixed organization roles
    ###############################
    logger.info(
        f"Updating user with mixed org roles: '{LINK_USER_MIXED_ORG_ROLES.external_user_id}' with X-API-Key: '{API_KEY_USER_MIXED_ORG_ROLES.key_id}'"
    )
    db_session.merge(USER_MIXED_ORG_ROLES, load=True)
    db_session.merge(LINK_USER_MIXED_ORG_ROLES, load=True)
    db_session.merge(API_KEY_USER_MIXED_ORG_ROLES, load=True)
    db_session.merge(USER_MIXED_ORG_ROLES_ORG_USER1, load=True)
    db_session.merge(USER_MIXED_ORG_ROLES_ORG_USER2, load=True)

    # Assign mixed roles: Admin of ORG1, Member of ORG2
    _assign_organization_role(db_session, USER_MIXED_ORG_ROLES_ORG_USER1, ORG_ADMIN)
    _assign_organization_role(db_session, USER_MIXED_ORG_ROLES_ORG_USER2, ORG_MEMBER)

    ###############################
    # API-only user for local development
    ###############################
    logger.info(
        f"Updating API-only user: '{LINK_API_USER.external_user_id}' with X-API-Key: '{API_KEY_FOR_API_USER.key_id}'"
    )
    db_session.merge(API_USER, load=True)
    db_session.merge(LINK_API_USER, load=True)
    db_session.merge(API_KEY_FOR_API_USER, load=True)

    # Log summary of all created user scenarios
    logger.info("=== USER SCENARIOS SUMMARY ===")
    logger.info("Created 6 user scenarios with role-based access:")
    logger.info("• no_org_user - Individual user (no organizations)")
    logger.info("• one_org_user - Organization admin (Sally's Soup Emporium)")
    logger.info("• two_org_user - Organization admin (both organizations)")
    logger.info("• org_member_user - Organization member (Sally's Soup Emporium)")
    logger.info("• mixed_roles_user - Admin of ORG1, Member of ORG2")
    logger.info("• api_user - API-only user for local development testing")
    logger.info("")
    logger.info("=== API KEYS FOR LOCAL DEVELOPMENT ===")
    logger.info("Use these X-API-KEY values for testing API calls:")
    logger.info(f"• no_org_user: {API_KEY_USER_NO_ORGS.key_id}")
    logger.info(f"• one_org_user: {API_KEY_USER_ONE_ORG.key_id}")
    logger.info(f"• two_org_user: {API_KEY_USER_TWO_ORGS.key_id}")
    logger.info(f"• org_member_user: {API_KEY_USER_ORG_MEMBER.key_id}")
    logger.info(f"• mixed_roles_user: {API_KEY_USER_MIXED_ORG_ROLES.key_id}")
    logger.info(f"• api_user: {API_KEY_FOR_API_USER.key_id}")
    logger.info("")
    logger.info("Example usage:")
    logger.info("curl -H 'X-API-KEY: local-dev-api-key' http://localhost:8080/v1/opportunities")


def _add_saved_opportunities(user: User, db_session: db.Session, count: int = 5) -> None:
    # Grab some recently made opportunities
    opportunities: list = (
        db_session.execute(
            select(Opportunity)
            .join(CurrentOpportunitySummary)
            .join(OpportunitySummary)
            .where(
                CurrentOpportunitySummary.opportunity_status.in_(
                    [OpportunityStatus.POSTED, OpportunityStatus.FORECASTED]
                )
            )
            .order_by(OpportunitySummary.close_date.asc())
            .limit(40)
        )
        .scalars()
        .all()
    )

    current_saved_opportunity_ids = {o.opportunity_id for o in user.saved_opportunities}

    added_saved_opps_count = 0
    for opportunity in opportunities:
        if added_saved_opps_count >= count:
            break
        # If they already have that opportunity ID saved, don't try to add it again
        if opportunity.opportunity_id in current_saved_opportunity_ids:
            continue

        factories.UserSavedOpportunityFactory.create(user=user, opportunity=opportunity)
        added_saved_opps_count += 1


def _add_saved_searches(user: User, db_session: db.Session, count: int = 2) -> None:
    # Grab some opportunity IDs
    # These won't realistically be something we would have returned
    # for these search, but just to have them line up with real opportunities
    opportunity_ids: list = (
        db_session.execute(
            select(Opportunity.opportunity_id).join(CurrentOpportunitySummary).limit(25)
        )
        .scalars()
        .all()
    )

    for _ in range(count):
        word = factories.fake.word()
        factories.UserSavedSearchFactory.create(
            user=user,
            name=f"Saved search '{word}'",
            search_query={
                "query": word,
                "format": "json",
                "filters": {"opportunity_status": {"one_of": ["forecasted", "posted"]}},
                "pagination": {
                    "page_size": 25,
                    "sort_order": [
                        {"order_by": "relevancy", "sort_direction": "descending"},
                        {"order_by": "close_date", "sort_direction": "ascending"},
                    ],
                    "page_offset": 1,
                },
                "query_operator": "AND",
            },
            searched_opportunity_ids=opportunity_ids,
        )
