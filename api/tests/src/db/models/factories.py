"""Factories for generating test data.

These factories are used to generate test data for the tests. They are
used both for generating in memory objects and for generating objects
that are persisted to the database.

The factories are based on the `factory_boy` library. See
https://factoryboy.readthedocs.io/en/latest/ for more information.
"""

import random
from datetime import datetime
from typing import Optional

import factory
import factory.fuzzy
import faker
from faker.providers import BaseProvider
from sqlalchemy import func
from sqlalchemy.orm import scoped_session

import src.adapters.db as db
import src.db.models.extract_models as extract_models
import src.db.models.foreign as foreign
import src.db.models.opportunity_models as opportunity_models
import src.db.models.staging as staging
import src.db.models.user_models as user_models
import src.util.datetime_util as datetime_util
from src.constants.lookup_constants import (
    AgencyDownloadFileType,
    AgencySubmissionNotificationSetting,
    ApplicantType,
    ExternalUserType,
    ExtractType,
    FundingCategory,
    FundingInstrument,
    OpportunityCategory,
    OpportunityCategoryLegacy,
    OpportunityStatus,
)
from src.db.models import agency_models
from src.util import file_util


def sometimes_none(factory_value, none_chance: float = 0.5):
    return factory.Maybe(
        decider=factory.LazyAttribute(lambda s: random.random() > none_chance),
        yes_declaration=factory_value,
        no_declaration=None,
    )


class CustomProvider(BaseProvider):
    """
    This class is a custom faker provider that can be used to generate
    fake data for our specific scenarios.

    The name of the functions defined in this class is the name of the individual provider.
    For example, the "agency_code" method below can be called by doing either of the following::

        fake.agency_code()

        factory.Faker("agency_code")

    Below we register this provider class with both the faker instance we setup, as well as
    the underlying one backing the factory's faker instance.

    See: https://faker.readthedocs.io/en/master/#how-to-create-a-provider
    """

    # Ideally use agencies here that actually exist so anyone
    # using data generated by this for front-end dev actually
    # has valid values
    AGENCIES = [
        "USAID",
        "USAID-SAF",
        "USAID-ETH",
        "DOC",
        "DOC-EDA",
        "DOC-NIST",
        "DOC-DOCNOAAERA",
        "DOI",
        "DOI-NPS",
        "DOI-FWS",
        "DOI-BLM",
        "DOI-USGS1",
        "DOI-BOR",
        "DOI-BOR-MP",
        "DOI-BIA",
        "DOI-BOR-LC",
        "DOI-BOEM",
        "HHS",
        "HHS-NIH11",
        "HHS-CDC",
        "HHS-HRSA",
        "HHS-ACF",
        "HHS-CDC-CGH",
        "HHS-ACL",
        "HHS-ACF-OHS",
        "HHS-CDC-HHSCDCERA",
        "HHS-FDA",
        "HHS-OPHS",
        "HHS-SAMHS-SAMHSA",
        "HHS-SAMHS",
        "HHS-IHS",
        "HHS-AHRQ",
        "HHS-CDC-NCCDPHP",
        "HHS-AOA",
        "HHS-CMS",
        "HHS-ACF-FYSB",
        "HHS-CDC-NCHHSTP",
        "HHS-ACF-OPRE",
        "EPA",
        "DOD",
        "DOD-AMRAA",
        "DOD-ONR",
        "DOD-AMC",
        "DOD-DARPA-DSO",
        "DOD-AFRL",
        "DOD-COE-FW",
        "DOD-COE",
        "DOD-AFOSR",
        "DOD-ONR-FAC",
        "DOD-DARPA-MTO",
        "DOD-COE-ERDC",
        "USDA",
        "USDA-NIFA",
        "USDA-NRCS",
        "USDA-FNS1",
        "USDA-CSREE",
        "USDA-FS",
        "USDA-RUS",
        "USDA-RBCS",
        "USDA-FAS",
        "USDA-AMS",
        "NSF",
        "DOE",
        "DOE-GFO",
        "DOE-NETL",
        "DOE-ARPAE",
        "USDOJ",
        "USDOJ-OJP-BJA",
        "USDOJ-OJP-OJJDP",
        "USDOJ-OJP-NIJ",
        "USDOJ-BOP-NIC",
        "USDOJ-OJP-OVC",
        "USDOJ-OJP-OVW",
        "USDOJ-OJP-BJS",
    ]

    # Various words we can use when building the agency names
    # Stuff that sounds like it might be an agency, even if its not exactly the name
    AGENCY_WORDS = [
        "Agriculture",
        "Commerce",
        "Defense",
        "Education",
        "Economics",
        "Energy",
        "Health",
        "Housing",
        "Justice",
        "Labor",
        "State",
        "Interior",
        "Transportation",
        "Science",
        "Arts",
    ]

    AGENCY_NAME_FORMATS = [
        "Department of {{agency_word}}",
        "Department of the {{agency_word}}",
        "Agency for {{agency_word}}",
        "National {{agency_word}} Administration",
    ]

    AGENCY_CONTACT_DESC_FORMATS = [
        "{{name}}\n{{job}}\n555-###-####\n{{email}}",
        "{{relevant_url}} Contact Center\nHours of operation are 24 hours a day, 7 days a week.\n{{email}}",
        "Webmaster\n{{email}}",
    ]

    # Rather than generate any random URL in our data, use those
    # that are vaguely relevant to avoid linking to anything outside
    # of the grants ecosystem that could cause confusion in test data
    # (ie. either a website we work with, or a very generic one)
    RELEVANT_URLS = ["google.com", "grants.gov", "simpler.grants.gov", "sam.gov"]

    ADDITIONAL_INFO_DESC_FORMATS = [
        "Full Announcement",
        "Grants.gov",
        "Link to grant on {{relevant_url}}",
        "Program Announcement",
        "Click on the link to see the full announcement.",
        "Division of {{company}}",
    ]

    # Opportunity title uses several other existing providers
    # to generate titles. Anything in {{ }} is calling a provider
    # with that name.
    OPPORTUNITY_TITLE_FORMATS = [
        "Research into {{job}} industry",
        "Embassy program for {{job}} in {{country}}",
        "{{name}} Foundation Grant for {{bs}}",
        "{{company}} {{year}} award",
    ]

    SUMMARY_DESCRIPTION_FORMATS = [
        "{{agency_code}} is looking to further investigate this topic. {{paragraph}}",
        "<p>{{paragraph}}</p><p><br></p><p>{{paragraph}}</p>",
        "The purpose of this Notice of Funding Opportunity (NOFO) is to support research into {{job}} and how we might {{catch_phrase}}.",
        "<div>{{paragraph:long}} <a href='{{relevant_url}}'>{{sentence}}</a> {{paragraph:long}}</div> <div>{{paragraph:long}} <a href='{{relevant_url}}'>{{sentence}}</a> {{paragraph:long}}</div>",
    ]

    # In the formatting, ? becomes a random letter, # becomes a random digit
    OPPORTUNITY_NUMBER_FORMATS = [
        "???-###-FY{{year}}-###",
        "{{agency_code}}-##-###",
        "???#######",
        "??-##-???-###",
        "{{word}}-###-##",
    ]

    YN_BOOLEAN_VALUES = ["Y", "N"]

    YN_YESNO_BOOLEAN_VALUES = ["Y", "N", "Yes", "No"]

    def agency_code(self) -> str:
        return self.random_element(self.AGENCIES)

    def agency_word(self) -> str:
        return self.random_element(self.AGENCY_WORDS)

    def agency_name(self) -> str:
        pattern = self.random_element(self.AGENCY_NAME_FORMATS)
        return self.generator.parse(pattern)

    def agency_contact_description(self) -> str:
        # bothify turns any ? into letters, and # into digits
        pattern = self.bothify(self.random_element(self.AGENCY_CONTACT_DESC_FORMATS))
        return self.generator.parse(pattern)

    def relevant_url(self):
        return self.random_element(self.RELEVANT_URLS)

    def additional_info_desc(self):
        pattern = self.random_element(self.ADDITIONAL_INFO_DESC_FORMATS)
        return self.generator.parse(pattern)

    def opportunity_number(self) -> str:
        # bothify turns any ? into letters, and # into digits
        pattern = self.bothify(self.random_element(self.OPPORTUNITY_NUMBER_FORMATS))
        return self.generator.parse(pattern).upper()

    def opportunity_title(self) -> str:
        pattern = self.random_element(self.OPPORTUNITY_TITLE_FORMATS)
        return self.generator.parse(pattern)

    def summary_description(self) -> str:
        self.generator.set_arguments("long", {"nb_sentences": 25})
        pattern = self.random_element(self.SUMMARY_DESCRIPTION_FORMATS)
        return self.generator.parse(pattern)

    def yn_boolean(self) -> str:
        return self.random_element(self.YN_BOOLEAN_VALUES)

    def yn_yesno_boolean(self) -> str:
        return self.random_element(self.YN_YESNO_BOOLEAN_VALUES)


fake = faker.Faker()
fake.add_provider(CustomProvider)
factory.Faker.add_provider(CustomProvider)

_db_session: Optional[db.Session] = None


def get_db_session() -> db.Session:
    # _db_session is only set in the pytest fixture `enable_factory_create`
    # so that tests do not unintentionally write to the database.
    if _db_session is None:
        raise Exception(
            """Factory db_session is not initialized.

            If your tests don't need to cover database behavior, consider
            calling the `build()` method instead of `create()` on the factory to
            not persist the generated model.

            If running tests that actually need data in the DB, pull in the
            `enable_factory_create` fixture to initialize the db_session.
            """
        )

    return _db_session


# The scopefunc ensures that the session gets cleaned up after each test
# it implicitly calls `remove()` on the session.
# see https://docs.sqlalchemy.org/en/20/orm/contextual.html
Session = scoped_session(lambda: get_db_session(), scopefunc=lambda: get_db_session())


class Generators:
    Now = factory.LazyFunction(datetime.now)
    UtcNow = factory.LazyFunction(datetime_util.utcnow)
    UuidObj = factory.Faker("uuid4", cast_to=None)
    PhoneNumber = factory.Sequence(lambda n: f"123-456-{n:04}")


class BaseFactory(factory.alchemy.SQLAlchemyModelFactory):

    class Meta:
        abstract = True
        sqlalchemy_session = Session
        sqlalchemy_session_persistence = "commit"


class OpportunityFactory(BaseFactory):
    class Meta:
        model = opportunity_models.Opportunity

    @classmethod
    def _setup_next_sequence(cls):
        if _db_session is not None:
            value = _db_session.query(
                func.max(opportunity_models.Opportunity.opportunity_id)
            ).scalar()
            if value is not None:
                return value + 1

        return 1

    opportunity_id = factory.Sequence(lambda n: n)

    opportunity_number = factory.Faker("opportunity_number")
    opportunity_title = factory.Faker("opportunity_title")

    agency_code = factory.Faker("agency_code")

    category = factory.fuzzy.FuzzyChoice(OpportunityCategory)
    # only set the category explanation if category is Other
    category_explanation = factory.Maybe(
        decider=factory.LazyAttribute(lambda o: o.category == OpportunityCategory.OTHER),
        yes_declaration=factory.Faker("sentence", nb_words=3),
        no_declaration=None,
    )

    is_draft = False  # Because we filter out drafts, just default these to False

    revision_number = 0  # We'll want to consider how we handle this when we add history

    opportunity_assistance_listings = factory.RelatedFactoryList(
        "tests.src.db.models.factories.OpportunityAssistanceListingFactory",
        factory_related_name="opportunity",
        size=lambda: random.randint(1, 3),
    )

    # By default we'll add a current opportunity summary which will be POSTED
    # if you'd like to easily modify the values, see the possible traits below in the
    # Params class section
    current_opportunity_summary = factory.RelatedFactory(
        "tests.src.db.models.factories.CurrentOpportunitySummaryFactory",
        factory_related_name="opportunity",
    )

    opportunity_attachments = []  # Use has_attachments=True to add attachments

    class Params:
        # These are common scenarios we might want for an opportunity.
        # Simply pass the in `trait_name=True` to the factory when making an object
        # and all of these will be set for you on the relevant models
        # See: https://factoryboy.readthedocs.io/en/stable/reference.html#traits

        no_current_summary = factory.Trait(current_opportunity_summary=None)

        # We set a trait for the OpportunitySummaryFactory for each of these as well as set the opportunity status
        is_posted_summary = factory.Trait(current_opportunity_summary__is_posted_summary=True)
        is_forecasted_summary = factory.Trait(
            current_opportunity_summary__is_forecasted_summary=True
        )
        is_closed_summary = factory.Trait(current_opportunity_summary__is_closed_summary=True)
        is_archived_non_forecast_summary = factory.Trait(
            current_opportunity_summary__is_archived_non_forecast_summary=True
        )
        is_archived_forecast_summary = factory.Trait(
            current_opportunity_summary__is_archived_forecast_summary=True
        )

        has_long_descriptions = factory.Trait(
            current_opportunity_summary__has_long_descriptions=True
        )

        # Set all nullable fields to null
        all_fields_null = factory.Trait(
            agency_code=None,
            category=None,
            category_explanation=None,
            current_opportunity_summary=None,
            opportunity_assistance_listings=None,
        )

        # Set the timestamps in the past rather than using the default of "now"
        timestamps_in_past = factory.Trait(
            created_at=factory.Faker("date_time_between", start_date="-5y", end_date="-3y"),
            updated_at=factory.Faker("date_time_between", start_date="-3y", end_date="-1y"),
        )

        has_attachments = factory.Trait(
            opportunity_attachments=factory.RelatedFactoryList(
                "tests.src.db.models.factories.OpportunityAttachmentFactory",
                factory_related_name="opportunity",
                size=lambda: random.randint(1, 2),
            )
        )


class OpportunitySummaryFactory(BaseFactory):
    class Meta:
        model = opportunity_models.OpportunitySummary

    opportunity = factory.SubFactory(OpportunityFactory, current_opportunity_summary=None)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)

    summary_description = factory.Faker("summary_description")
    is_cost_sharing = factory.Faker("boolean")

    # By default generate non-forecasts which affects several fields
    is_forecast = False

    # Forecasted records don't have a close date
    close_date = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.is_forecast),
        # If forecasted, don't set a close date
        yes_declaration=None,
        # otherwise a future date
        no_declaration=factory.Faker("date_between", start_date="+2w", end_date="+3w"),
    )
    close_date_description = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.close_date is None),
        yes_declaration=None,
        no_declaration=factory.Faker("paragraph", nb_sentences=1),
    )

    # Just a random recent post date
    post_date = factory.Faker("date_between", start_date="-3w", end_date="-1d")

    # By default set to a date in the future
    archive_date = factory.Faker("date_between", start_date="+3w", end_date="+4w")

    unarchive_date = None

    expected_number_of_awards = factory.Faker("random_int", min=1, max=25)
    estimated_total_program_funding = factory.Faker(
        "random_int", min=10_000, max=10_000_000, step=5_000
    )
    award_floor = factory.LazyAttribute(
        lambda s: s.estimated_total_program_funding // s.expected_number_of_awards
    )
    award_ceiling = factory.LazyAttribute(lambda s: s.estimated_total_program_funding)

    additional_info_url = factory.Faker("relevant_url")
    additional_info_url_description = factory.Faker("additional_info_desc")

    funding_category_description = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: fake.boolean()),  # random chance to include value
        yes_declaration=factory.Faker("paragraph", nb_sentences=1),
        no_declaration=None,
    )
    applicant_eligibility_description = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: fake.boolean()),  # random chance to include value
        yes_declaration=factory.Faker("paragraph", nb_sentences=5),
        no_declaration=None,
    )

    agency_code = factory.LazyAttribute(lambda s: s.opportunity.agency_code)
    agency_name = factory.Faker("agency_name")
    agency_phone_number = Generators.PhoneNumber
    agency_contact_description = factory.Faker("agency_contact_description")
    agency_email_address = factory.Faker("email")
    agency_email_address_description = factory.LazyAttribute(
        lambda s: f"Contact {s.agency_name} via email"
    )

    # Forecasted values are only set if is_forecast=True
    forecasted_post_date = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.is_forecast),
        # If forecasted, set it in the future
        yes_declaration=factory.Faker("date_between", start_date="+2w", end_date="+3w"),
        # otherwise don't set
        no_declaration=None,
    )
    forecasted_close_date = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.is_forecast),
        # If forecasted, set it in the future
        yes_declaration=factory.Faker("date_between", start_date="+6w", end_date="+12w"),
        # otherwise don't set
        no_declaration=None,
    )
    forecasted_close_date_description = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.forecasted_close_date is None),
        yes_declaration=None,
        no_declaration=factory.Faker("paragraph", nb_sentences=1),
    )
    forecasted_award_date = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.is_forecast),
        # If forecasted, set it in the future
        yes_declaration=factory.Faker("date_between", start_date="+26w", end_date="+30w"),
        # otherwise don't set
        no_declaration=None,
    )
    forecasted_project_start_date = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: s.is_forecast),
        # If forecasted, set it in the future
        yes_declaration=factory.Faker("date_between", start_date="+30w", end_date="+52w"),
        # otherwise don't set
        no_declaration=None,
    )
    fiscal_year = factory.LazyAttribute(
        lambda s: s.forecasted_project_start_date.year if s.forecasted_project_start_date else None
    )

    is_deleted = False

    # Generally, current summaries won't have the revision number set
    revision_number = None

    version_number = factory.Faker("random_int", min=8, max=13)

    funding_instruments = factory.Faker(
        "random_elements",
        length=random.randint(1, 3),
        elements=[f for f in FundingInstrument],
        unique=True,
    )
    funding_categories = factory.Faker(
        "random_elements",
        length=random.randint(1, 3),
        elements=[f for f in FundingCategory],
        unique=True,
    )
    applicant_types = factory.Faker(
        "random_elements",
        length=random.randint(1, 3),
        elements=[a for a in ApplicantType],
        unique=True,
    )

    created_at = factory.Faker("date_time_between", start_date="-5y", end_date="-3y")
    updated_at = factory.LazyAttribute(
        lambda o: fake.date_time_between(start_date=o.created_at, end_date="-1y")
    )

    class Params:
        # These are common overrides we might want for an opportunity summary.
        # Simply pass the in `trait_name=True` to the factory when making an object
        # and all of these will be set for you, overriding the above defaults
        # See: https://factoryboy.readthedocs.io/en/stable/reference.html#traits

        # The default state of values above assumes an "active" summary that has been
        # posted, so only need to configure the is_forecast field for these two
        is_posted_summary = factory.Trait(is_forecast=False)
        is_forecasted_summary = factory.Trait(is_forecast=True)

        # For these scenarios, adjust a few dates to make more sense
        is_closed_summary = factory.Trait(
            is_forecast=False,
            post_date=factory.Faker("date_between", start_date="-6w", end_date="-5w"),
            close_date=factory.Faker("date_between", start_date="-3w", end_date="-1w"),
        )

        is_archived_non_forecast_summary = factory.Trait(
            is_forecast=False,
            post_date=factory.Faker("date_between", start_date="-6w", end_date="-5w"),
            close_date=factory.Faker("date_between", start_date="-3w", end_date="-2w"),
            archive_date=factory.Faker("date_between", start_date="-2w", end_date="-1w"),
        )
        is_archived_forecast_summary = factory.Trait(
            is_forecast=True,
            post_date=factory.Faker("date_between", start_date="-6w", end_date="-5w"),
            archive_date=factory.Faker("date_between", start_date="-2w", end_date="-1w"),
        )

        is_non_public_non_forecast_summary = factory.Trait(
            is_forecast=False,
            post_date=factory.Faker("date_between", start_date="+3w", end_date="+4w"),
        )
        is_non_public_forecast_summary = factory.Trait(
            is_forecast=True,
            post_date=factory.Faker("date_between", start_date="+3w", end_date="+4w"),
        )

        # Set all nullable fields to null
        all_fields_null = factory.Trait(
            summary_description=None,
            is_cost_sharing=None,
            post_date=None,
            close_date=None,
            close_date_description=None,
            archive_date=None,
            unarchive_date=None,
            expected_number_of_awards=None,
            estimated_total_program_funding=None,
            award_floor=None,
            award_ceiling=None,
            additional_info_url=None,
            additional_info_url_description=None,
            forecasted_post_date=None,
            forecasted_close_date=None,
            forecasted_close_date_description=None,
            forecasted_award_date=None,
            forecasted_project_start_date=None,
            fiscal_year=None,
            modification_comments=None,
            funding_category_description=None,
            applicant_eligibility_description=None,
            agency_code=None,
            agency_name=None,
            agency_phone_number=None,
            agency_contact_description=None,
            agency_email_address=None,
            agency_email_address_description=None,
            is_deleted=None,
            funding_instruments=[],
            funding_categories=[],
            applicant_types=[],
        )

        no_link_values = factory.Trait(
            link_funding_instruments=[],
            link_funding_categories=[],
            link_applicant_types=[],
        )

        has_long_descriptions = factory.Trait(
            summary_description=factory.Faker("paragraph", nb_sentences=60),
            close_date_description=factory.Faker("paragraph", nb_sentences=30),
        )


class CurrentOpportunitySummaryFactory(BaseFactory):
    class Meta:
        model = opportunity_models.CurrentOpportunitySummary

    opportunity = factory.SubFactory(OpportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda a: a.opportunity.opportunity_id)

    opportunity_summary = factory.SubFactory(
        OpportunitySummaryFactory, opportunity=factory.SelfAttribute("..opportunity")
    )
    opportunity_summary_id = factory.LazyAttribute(
        lambda a: a.opportunity_summary.opportunity_summary_id
    )

    opportunity_status = OpportunityStatus.POSTED

    class Params:
        is_posted_summary = factory.Trait(
            opportunity_status=OpportunityStatus.POSTED, opportunity_summary__is_posted_summary=True
        )
        is_forecasted_summary = factory.Trait(
            opportunity_status=OpportunityStatus.FORECASTED,
            opportunity_summary__is_forecasted_summary=True,
        )
        is_closed_summary = factory.Trait(
            opportunity_status=OpportunityStatus.CLOSED, opportunity_summary__is_closed_summary=True
        )
        is_archived_non_forecast_summary = factory.Trait(
            opportunity_status=OpportunityStatus.ARCHIVED,
            opportunity_summary__is_archived_non_forecast_summary=True,
        )
        is_archived_forecast_summary = factory.Trait(
            opportunity_status=OpportunityStatus.ARCHIVED,
            opportunity_summary__is_archived_forecast_summary=True,
        )

        has_long_descriptions = factory.Trait(
            opportunity_summary__has_long_descriptions=True,
        )


class OpportunityAssistanceListingFactory(BaseFactory):
    class Meta:
        model = opportunity_models.OpportunityAssistanceListing

    @classmethod
    def _setup_next_sequence(cls):
        if _db_session is not None:
            value = _db_session.query(
                func.max(
                    opportunity_models.OpportunityAssistanceListing.opportunity_assistance_listing_id
                )
            ).scalar()
            if value is not None:
                return value + 1

        return 1

    opportunity_assistance_listing_id = factory.Sequence(lambda n: n)

    opportunity = factory.SubFactory(OpportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda a: a.opportunity.opportunity_id)

    program_title = factory.Faker("company")
    assistance_listing_number = factory.LazyFunction(
        lambda: f"{fake.random_int(min=1, max=99):02}.{fake.random_int(min=1, max=999):03}"
    )

    class Params:
        # Set the timestamps in the past rather than using the default of "now"
        timestamps_in_past = factory.Trait(
            created_at=factory.Faker("date_time_between", start_date="-5y", end_date="-3y"),
            updated_at=factory.Faker("date_time_between", start_date="-3y", end_date="-1y"),
        )


class LinkOpportunitySummaryFundingInstrumentFactory(BaseFactory):
    class Meta:
        model = opportunity_models.LinkOpportunitySummaryFundingInstrument

    opportunity_summary = factory.SubFactory(OpportunitySummaryFactory)
    opportunity_summary_id = factory.LazyAttribute(
        lambda f: f.opportunity_summary.opportunity_summary_id
    )

    # We use an iterator here to keep the values unique when generated by the opportunity factory
    funding_instrument = factory.Iterator(FundingInstrument)


class LinkOpportunitySummaryFundingCategoryFactory(BaseFactory):
    class Meta:
        model = opportunity_models.LinkOpportunitySummaryFundingCategory

    opportunity_summary = factory.SubFactory(OpportunitySummaryFactory)
    opportunity_summary_id = factory.LazyAttribute(
        lambda f: f.opportunity_summary.opportunity_summary_id
    )

    # We use an iterator here to keep the values unique when generated by the opportunity factory
    funding_category = factory.Iterator(FundingCategory)


class LinkOpportunitySummaryApplicantTypeFactory(BaseFactory):
    class Meta:
        model = opportunity_models.LinkOpportunitySummaryApplicantType

    opportunity_summary = factory.SubFactory(OpportunitySummaryFactory)
    opportunity_summary_id = factory.LazyAttribute(
        lambda f: f.opportunity_summary.opportunity_summary_id
    )

    # We use an iterator here to keep the values unique when generated by the opportunity factory
    applicant_type = factory.Iterator(ApplicantType)


class OpportunityAttachmentFactory(BaseFactory):
    class Meta:
        model = opportunity_models.OpportunityAttachment

    opportunity = factory.SubFactory(OpportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda a: a.opportunity.opportunity_id)

    # Whatever you pass in for file_contents will end up in the file, but
    # not included anywhere on the model itself
    file_contents = factory.Faker("sentence")
    # NOTE: If you want the file to properly get written to s3 for tests/locally
    # make sure the bucket actually exists
    file_location = factory.LazyAttribute(
        lambda o: f"s3://local-mock-public-bucket/opportunities/{o.opportunity_id}/attachments/{fake.random_int(min=1, max=100_000_000)}/{o.file_name}"
    )
    mime_type = factory.Faker("mime_type")
    file_name = factory.Faker("file_name")
    file_description = factory.Faker("sentence")
    file_size_bytes = factory.Faker("random_int", min=1000, max=10000000)

    created_at = factory.Faker("date_time_between", start_date="-1y", end_date="now")
    updated_at = factory.LazyAttribute(
        lambda o: fake.date_time_between(start_date=o.created_at, end_date="now")
    )

    @classmethod
    def _build(cls, model_class, *args, **kwargs):
        kwargs.pop("file_contents")  # Don't file for build strategy
        super()._build(model_class, *args, **kwargs)

    @classmethod
    def _create(cls, model_class, *args, **kwargs):
        file_contents = kwargs.pop("file_contents")
        attachment = super()._create(model_class, *args, **kwargs)

        try:
            with file_util.open_stream(attachment.file_location, "w") as my_file:
                my_file.write(file_contents)
        except Exception as e:
            raise Exception(
                f"""There was an error writing your attachment to {attachment.file_location}.

                Does this location exist? If you are running in unit tests, make sure
                `enable_factory_create` is pulled in as a fixture to your test.

                If you are running locally outside of unit tests, make sure that `make init-localstack` has run.
                """
            ) from e

        return attachment


class AgencyContactInfoFactory(BaseFactory):
    class Meta:
        model = agency_models.AgencyContactInfo

    contact_name = factory.Faker("name")
    address_line_1 = factory.Faker("street_address")
    address_line_2 = sometimes_none(factory.Sequence(lambda n: f"Room {n}"))
    city = factory.Faker("city")
    state = factory.Faker("state_abbr")
    zip_code = factory.Faker("street_address")
    phone_number = factory.Faker("basic_phone_number")
    primary_email = factory.Faker("email")
    secondary_email = sometimes_none(factory.Faker("email"))


class AgencyFactory(BaseFactory):
    class Meta:
        model = agency_models.Agency

    agency_name = factory.Faker("agency_name")

    agency_code = factory.Iterator(CustomProvider.AGENCIES)

    sub_agency_code = factory.LazyAttribute(lambda a: a.agency_code.split("-")[0])

    assistance_listing_number = factory.Faker("random_int", min=1, max=999)

    agency_submission_notification_setting = factory.fuzzy.FuzzyChoice(
        AgencySubmissionNotificationSetting
    )

    agency_contact_info = factory.SubFactory(AgencyContactInfoFactory)
    agency_contact_info_id = factory.LazyAttribute(
        lambda a: a.agency_contact_info.agency_contact_info_id if a.agency_contact_info else None
    )

    is_test_agency = False

    ldap_group = factory.LazyAttribute(lambda a: a.agency_code)
    description = factory.LazyAttribute(lambda a: a.agency_name)
    label = factory.LazyAttribute(lambda a: a.agency_name)
    is_multilevel_agency = factory.Faker("boolean")
    is_multiproject = factory.Faker("boolean")
    has_system_to_system_certificate = factory.Faker("boolean")
    can_view_packages_in_grace_period = factory.Faker("boolean")
    is_image_workspace_enabled = factory.Faker("boolean")
    is_validation_workspace_enabled = factory.Faker("boolean")

    top_level_agency_id = None
    agency_download_file_types = factory.Faker(
        "random_elements",
        length=random.randint(1, 2),
        elements=[a for a in AgencyDownloadFileType],
        unique=True,
    )

    # Create the contact info first and use its ID
    agency_contact_info = factory.SubFactory(AgencyContactInfoFactory)
    agency_contact_info_id = factory.LazyAttribute(
        lambda a: a.agency_contact_info.agency_contact_info_id if a.agency_contact_info else None
    )


####################################
# Staging Table Factories
####################################


LEGACY_APPLICANT_TYPE_IDS = [
    "00",
    "01",
    "02",
    "04",
    "05",
    "06",
    "07",
    "08",
    "11",
    "12",
    "13",
    "20",
    "21",
    "22",
    "23",
    "25",
    "99",
]
LEGACY_FUNDING_CATEGORY_IDS = [
    "RA",
    "AG",
    "AR",
    "BC",
    "CD",
    "CP",
    "DPR",
    "ED",
    "ELT",
    "EN",
    "ENV",
    "FN",
    "HL",
    "HO",
    "HU",
    "IIJ",
    "IS",
    "ISS",
    "LJL",
    "NR",
    "OZ",
    "RD",
    "ST",
    "T",
    "ACA",
    "O",
]
LEGACY_FUNDING_INSTRUMENT_IDS = ["CA", "G", "PC", "O"]


class TopportunityFactory(BaseFactory):
    class Meta:
        abstract = True

    opportunity_id = factory.Sequence(lambda n: n)

    oppnumber = factory.Faker("opportunity_number")
    opptitle = factory.Faker("opportunity_title")

    owningagency = factory.Faker("agency_code")

    oppcategory = factory.fuzzy.FuzzyChoice(OpportunityCategoryLegacy)
    # only set the category explanation if category is Other
    category_explanation = factory.Maybe(
        decider=factory.LazyAttribute(lambda o: o.oppcategory == OpportunityCategoryLegacy.OTHER),
        yes_declaration=factory.Faker("sentence", nb_words=5),
        no_declaration=None,
    )

    is_draft = factory.fuzzy.FuzzyChoice(["N", "S"])

    revision_number = factory.Faker("random_int", min=1, max=10)

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )


class TopportunityCfdaFactory(BaseFactory):
    class Meta:
        abstract = True

    opp_cfda_id = factory.Sequence(lambda n: n)
    opportunity_id = factory.Sequence(lambda n: n)

    programtitle = factory.Faker("company")
    cfdanumber = factory.LazyFunction(
        lambda: f"{fake.random_int(min=1, max=99):02}.{fake.random_int(min=1, max=999):03}"
    )

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )


class TsynopsisFactory(BaseFactory):
    class Meta:
        abstract = True

    opportunity_id = factory.Sequence(lambda n: n)

    posting_date = factory.Faker("date_between", start_date="-3w", end_date="now")
    response_date = factory.Faker("date_between", start_date="+2w", end_date="+3w")
    archive_date = factory.Faker("date_between", start_date="+3w", end_date="+4w")
    unarchive_date = sometimes_none(
        factory.Faker("date_between", start_date="+6w", end_date="+7w"), none_chance=0.9
    )
    syn_desc = factory.Faker("summary_description")
    oth_cat_fa_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=1))

    cost_sharing = sometimes_none(factory.Faker("yn_yesno_boolean"), none_chance=0.1)
    # These int values are stored as strings
    number_of_awards = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(1, 25))), none_chance=0.1
    )
    est_funding = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(25_000, 25_000_000, step=5_000))),
        none_chance=0.1,
    )
    award_ceiling = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(10_000, 25_000, step=5_000))),
        none_chance=0.1,
    )
    award_floor = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(0, 10_000, step=5_000))), none_chance=0.1
    )

    fd_link_url = factory.Faker("relevant_url")
    fd_link_desc = factory.Faker("additional_info_desc")
    agency_contact_desc = factory.Faker("agency_contact_description")
    ac_email_addr = factory.Faker("email")
    ac_email_desc = factory.LazyAttribute(lambda s: f"Contact {s.ac_name} via email")
    a_sa_code = factory.Faker("agency_code")
    ac_phone_number = Generators.PhoneNumber
    ac_name = factory.Faker("agency_name")

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )
    create_ts = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    sendmail = sometimes_none(factory.Faker("yn_yesno_boolean"))
    response_date_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=2))
    applicant_elig_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=5))
    version_nbr = factory.Faker("random_int", min=0, max=10)
    modification_comments = sometimes_none(factory.Faker("paragraph", nb_sentences=1))
    publisheruid = sometimes_none(factory.Faker("first_name"))
    publisher_profile_id = sometimes_none(factory.Faker("random_int", min=1, max=99_999))


class TsynopsisAttachmentFactory(BaseFactory):
    class Meta:
        abstract = True

    syn_att_id: factory.Sequence(lambda n: n)
    opportunity_id: factory.Sequence(lambda n: n)
    att_revision_number = factory.Faker("random_int", min=1000, max=10000000)
    att_type: factory.Faker("att_type")
    mime_type = factory.Faker("mime_type")
    link_url = factory.Faker("relevant_url")
    file_name = factory.Faker("file_name", category="text")
    file_desc = factory.Faker("sentence")
    file_lob = factory.LazyFunction(lambda: fake.sentence(25).encode())
    file_lob_size = factory.LazyAttribute(lambda x: len(x.file_lob) if x.file_lob else 0)
    create_date = factory.Faker("date_time_between", start_date="-1y", end_date="now")
    created_date = factory.LazyAttribute(
        lambda o: fake.date_time_between(start_date=o.create_date, end_date="now")
    )
    last_upd_date = factory.LazyAttribute(
        lambda o: fake.date_time_between(start_date=o.created_date, end_date="now")
    )
    creator_id = factory.Faker("first_name")
    last_upd_id = factory.Faker("first_name")
    syn_att_folder_id = factory.Faker("random_int", min=1000, max=10000000)


class TforecastFactory(BaseFactory):
    class Meta:
        abstract = True

    opportunity_id = factory.Sequence(lambda n: n)

    posting_date = factory.Faker("date_between", start_date="-3w", end_date="now")
    archive_date = factory.Faker("date_between", start_date="+3w", end_date="+4w")
    forecast_desc = factory.Faker("summary_description")
    oth_cat_fa_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=1))

    cost_sharing = sometimes_none(factory.Faker("yn_yesno_boolean"), none_chance=0.1)
    # These int values are stored as strings
    number_of_awards = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(1, 25))), none_chance=0.1
    )
    est_funding = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(25_000, 25_000_000, step=5_000))),
        none_chance=0.1,
    )
    award_ceiling = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(10_000, 25_000, step=5_000))),
        none_chance=0.1,
    )
    award_floor = sometimes_none(
        factory.LazyFunction(lambda: str(fake.random_int(0, 10_000, step=5_000))), none_chance=0.1
    )

    fd_link_url = factory.Faker("relevant_url")
    fd_link_desc = factory.Faker("additional_info_desc")
    ac_email_addr = factory.Faker("email")
    ac_email_desc = factory.LazyAttribute(lambda s: f"Contact {s.ac_name} via email")
    agency_code = factory.Faker("agency_code")
    ac_phone = Generators.PhoneNumber
    ac_name = factory.Faker("agency_name")

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )
    create_ts = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    sendmail = sometimes_none(factory.Faker("yn_yesno_boolean"))
    applicant_elig_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=5))
    version_nbr = factory.Faker("random_int", min=0, max=10)
    modification_comments = sometimes_none(factory.Faker("paragraph", nb_sentences=1))
    publisheruid = sometimes_none(factory.Faker("first_name"))
    publisher_profile_id = sometimes_none(factory.Faker("random_int", min=1, max=99_999))

    est_synopsis_posting_date = sometimes_none(
        factory.Faker("date_between", start_date="+2w", end_date="+3w")
    )
    est_appl_response_date = sometimes_none(
        factory.Faker("date_between", start_date="+4w", end_date="+6w")
    )
    est_appl_response_date_desc = sometimes_none(factory.Faker("paragraph", nb_sentences=1))
    est_award_date = sometimes_none(
        factory.Faker("date_between", start_date="+26w", end_date="+30w")
    )
    est_project_start_date = sometimes_none(
        factory.Faker("date_between", start_date="+30w", end_date="+52w")
    )
    fiscal_year = factory.LazyAttribute(
        lambda f: f.est_project_start_date.year if f.est_project_start_date else None
    )


class TapplicanttypesFactory(BaseFactory):
    # Base abstract factory for both TapplicanttypesForecast and TapplicanttypesSynopsis
    class Meta:
        abstract = True

    at_id = factory.Iterator(LEGACY_APPLICANT_TYPE_IDS)

    opportunity_id = factory.Sequence(lambda n: n)

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )

    last_upd_id = factory.Faker("first_name")
    creator_id = factory.Faker("first_name")


class TfundactcatFactory(BaseFactory):
    class Meta:
        abstract = True

    fac_id = factory.Iterator(LEGACY_FUNDING_CATEGORY_IDS)

    opportunity_id = factory.Sequence(lambda n: n)

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )

    creator_id = factory.Faker("first_name")
    last_upd_id = factory.Faker("first_name")


class TfundinstrFactory(BaseFactory):
    class Meta:
        abstract = True

    fi_id = factory.Iterator(LEGACY_FUNDING_INSTRUMENT_IDS)

    opportunity_id = factory.Sequence(lambda n: n)

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )

    creator_id = factory.Faker("first_name")
    last_upd_id = factory.Faker("first_name")


####################################
# Staging Table Factories
####################################


class AbstractStagingFactory(BaseFactory):
    class Meta:
        abstract = True

    # Default to being a new insert/update
    is_deleted = False
    transformed_at = None

    class Params:
        already_transformed = factory.Trait(
            transformed_at=factory.Faker("date_time_between", start_date="-7d", end_date="-1d")
        )


class StagingTopportunityFactory(TopportunityFactory, AbstractStagingFactory):
    class Meta:
        model = staging.opportunity.Topportunity

    cfdas = factory.RelatedFactoryList(
        "tests.src.db.models.factories.StagingTopportunityCfdaFactory",
        factory_related_name="opportunity",
        size=lambda: random.randint(1, 3),
    )

    class Params:
        # Trait to set all nullable fields to None
        all_fields_null = factory.Trait(
            oppnumber=None,
            revision_number=None,
            opptitle=None,
            owningagency=None,
            oppcategory=None,
            category_explanation=None,
        )


class StagingTopportunityCfdaFactory(TopportunityCfdaFactory, AbstractStagingFactory):
    class Meta:
        model = staging.opportunity.TopportunityCfda

    opportunity = factory.SubFactory(StagingTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)

    class Params:
        # Trait to set all nullable fields to None
        all_fields_null = factory.Trait(
            programtitle=None,
            cfdanumber=None,
        )


class StagingTsynopsisFactory(TsynopsisFactory, AbstractStagingFactory):
    class Meta:
        model = staging.synopsis.Tsynopsis

    opportunity = factory.SubFactory(StagingTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class StagingTsynopsisHistFactory(StagingTsynopsisFactory):
    class Meta:
        model = staging.synopsis.TsynopsisHist

    revision_number = factory.Faker("random_int", min=1, max=25)
    action_type = "U"  # Update, put D for deleted


class StagingTforecastFactory(TforecastFactory, AbstractStagingFactory):
    class Meta:
        model = staging.forecast.Tforecast

    opportunity = factory.SubFactory(StagingTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class StagingTforecastHistFactory(StagingTforecastFactory):
    class Meta:
        model = staging.forecast.TforecastHist

    revision_number = factory.Faker("random_int", min=1, max=25)
    action_type = "U"  # Update, put D for deleted


class StagingTapplicanttypesForecastFactory(TapplicanttypesFactory, AbstractStagingFactory):
    class Meta:
        model = staging.forecast.TapplicanttypesForecast

    at_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(StagingTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            forecast=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTapplicanttypesForecastHistFactory(StagingTapplicanttypesForecastFactory):
    class Meta:
        model = staging.forecast.TapplicanttypesForecastHist

    forecast = factory.SubFactory(StagingTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class StagingTapplicanttypesSynopsisFactory(TapplicanttypesFactory, AbstractStagingFactory):
    class Meta:
        model = staging.synopsis.TapplicanttypesSynopsis

    at_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(StagingTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            synopsis=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTapplicanttypesSynopsisHistFactory(StagingTapplicanttypesSynopsisFactory):
    class Meta:
        model = staging.synopsis.TapplicanttypesSynopsisHist

    synopsis = factory.SubFactory(StagingTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class StagingTfundactcatForecastFactory(TfundactcatFactory, AbstractStagingFactory):
    class Meta:
        model = staging.forecast.TfundactcatForecast

    fac_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(StagingTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            forecast=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTfundactcatForecastHistFactory(StagingTfundactcatForecastFactory):
    class Meta:
        model = staging.forecast.TfundactcatForecastHist

    forecast = factory.SubFactory(StagingTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class StagingTfundactcatSynopsisFactory(TfundactcatFactory, AbstractStagingFactory):
    class Meta:
        model = staging.synopsis.TfundactcatSynopsis

    fac_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(StagingTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            synopsis=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTfundactcatSynopsisHistFactory(StagingTfundactcatSynopsisFactory):
    class Meta:
        model = staging.synopsis.TfundactcatSynopsisHist

    synopsis = factory.SubFactory(StagingTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class StagingTfundinstrForecastFactory(TfundinstrFactory, AbstractStagingFactory):
    class Meta:
        model = staging.forecast.TfundinstrForecast

    fi_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(StagingTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            forecast=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTfundinstrForecastHistFactory(StagingTfundinstrForecastFactory):
    class Meta:
        model = staging.forecast.TfundinstrForecastHist

    forecast = factory.SubFactory(StagingTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class StagingTfundinstrSynopsisFactory(TfundinstrFactory, AbstractStagingFactory):
    class Meta:
        model = staging.synopsis.TfundinstrSynopsis

    fi_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(StagingTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)

    class Params:
        orphaned_record = factory.Trait(
            synopsis=None, opportunity_id=factory.Faker("random_int", min=10_000, max=50_000)
        )


class StagingTfundinstrSynopsisHistFactory(StagingTfundinstrSynopsisFactory):
    class Meta:
        model = staging.synopsis.TfundinstrSynopsisHist

    synopsis = factory.SubFactory(StagingTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class StagingTgroupsFactory(AbstractStagingFactory):
    class Meta:
        model = staging.tgroups.Tgroups

    keyfield = ""
    value = ""

    created_date = factory.Faker("date_time_between", start_date="-10y", end_date="-5y")
    last_upd_date = sometimes_none(
        factory.Faker("date_time_between", start_date="-5y", end_date="now")
    )

    last_upd_id = factory.Faker("first_name")
    creator_id = factory.Faker("first_name")


class StagingTsynopsisAttachmentFactory(TsynopsisAttachmentFactory, AbstractStagingFactory):
    class Meta:
        model = staging.attachment.TsynopsisAttachment

    opportunity = factory.SubFactory(StagingTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda o: o.opportunity.opportunity_id)


####################################
# Foreign Table Factories
####################################


class ForeignTopportunityFactory(TopportunityFactory):
    class Meta:
        model = foreign.opportunity.Topportunity

    @classmethod
    def _setup_next_sequence(cls):
        if _db_session is not None:
            value = _db_session.query(
                func.max(foreign.opportunity.Topportunity.opportunity_id)
            ).scalar()
            if value is not None:
                return value + 1

        return 1

    cfdas = factory.RelatedFactoryList(
        "tests.src.db.models.factories.ForeignTopportunityCfdaFactory",
        factory_related_name="opportunity",
        size=lambda: random.randint(1, 3),
    )


class ForeignTopportunityCfdaFactory(TopportunityCfdaFactory):
    class Meta:
        model = foreign.opportunity.TopportunityCfda

    @classmethod
    def _setup_next_sequence(cls):
        if _db_session is not None:
            value = _db_session.query(
                func.max(foreign.opportunity.TopportunityCfda.opp_cfda_id)
            ).scalar()
            if value is not None:
                return value + 1

        return 1

    opportunity = factory.SubFactory(ForeignTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class ForeignTsynopsisFactory(TsynopsisFactory):
    class Meta:
        model = foreign.synopsis.Tsynopsis

    opportunity = factory.SubFactory(ForeignTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class ForeignTsynopsisHistFactory(ForeignTsynopsisFactory):
    class Meta:
        model = foreign.synopsis.TsynopsisHist

    revision_number = factory.Faker("random_int", min=1, max=25)
    action_type = "U"  # Update, put D for deleted


class ForeignTforecastFactory(TforecastFactory):
    class Meta:
        model = foreign.forecast.Tforecast

    opportunity = factory.SubFactory(ForeignTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class ForeignTforecastHistFactory(ForeignTforecastFactory):
    class Meta:
        model = foreign.forecast.TforecastHist

    revision_number = factory.Faker("random_int", min=1, max=25)
    action_type = "U"  # Update, put D for deleted


class ForeignTapplicanttypesForecastFactory(TapplicanttypesFactory):
    class Meta:
        model = foreign.forecast.TapplicanttypesForecast

    at_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(ForeignTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)


class ForeignTapplicanttypesForecastHistFactory(ForeignTapplicanttypesForecastFactory):
    class Meta:
        model = foreign.forecast.TapplicanttypesForecastHist

    forecast = factory.SubFactory(ForeignTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class ForeignTapplicanttypesSynopsisFactory(TapplicanttypesFactory):
    class Meta:
        model = foreign.synopsis.TapplicanttypesSynopsis

    at_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(ForeignTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)


class ForeignTapplicanttypesSynopsisHistFactory(ForeignTapplicanttypesSynopsisFactory):
    class Meta:
        model = foreign.synopsis.TapplicanttypesSynopsisHist

    synopsis = factory.SubFactory(ForeignTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class ForeignTfundactcatForecastFactory(TfundactcatFactory):
    class Meta:
        model = foreign.forecast.TfundactcatForecast

    fac_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(ForeignTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)


class ForeignTfundactcatForecastHistFactory(ForeignTfundactcatForecastFactory):
    class Meta:
        model = foreign.forecast.TfundactcatForecastHist

    forecast = factory.SubFactory(ForeignTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class ForeignTfundactcatSynopsisFactory(TfundactcatFactory):
    class Meta:
        model = foreign.synopsis.TfundactcatSynopsis

    fac_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(ForeignTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)


class ForeignTfundactcatSynopsisHistFactory(ForeignTfundactcatSynopsisFactory):
    class Meta:
        model = foreign.synopsis.TfundactcatSynopsisHist

    synopsis = factory.SubFactory(ForeignTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class ForeignTfundinstrForecastFactory(TfundinstrFactory):
    class Meta:
        model = foreign.forecast.TfundinstrForecast

    fi_frcst_id = factory.Sequence(lambda n: n)

    forecast = factory.SubFactory(ForeignTforecastFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)


class ForeignTfundinstrForecastHistFactory(ForeignTfundinstrForecastFactory):
    class Meta:
        model = foreign.forecast.TfundinstrForecastHist

    forecast = factory.SubFactory(ForeignTforecastHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.forecast.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.forecast.revision_number)


class ForeignTfundinstrSynopsisFactory(TfundinstrFactory):
    class Meta:
        model = staging.synopsis.TfundinstrSynopsis

    fi_syn_id = factory.Sequence(lambda n: n)

    synopsis = factory.SubFactory(StagingTsynopsisFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)


class ForeignTfundinstrSynopsisHistFactory(ForeignTfundinstrSynopsisFactory):
    class Meta:
        model = foreign.synopsis.TfundinstrSynopsisHist

    synopsis = factory.SubFactory(ForeignTsynopsisHistFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.synopsis.opportunity_id)
    revision_number = factory.LazyAttribute(lambda s: s.synopsis.revision_number)


class ForeignTsynopsisAttachmentFactory(TsynopsisAttachmentFactory):
    class Meta:
        model = foreign.attachment.TsynopsisAttachment

    opportunity = factory.SubFactory(ForeignTopportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda o: o.opportunity.opportunity_id)


##
# Pseudo-factories
##


class StagingTgroupsAgencyFactory(factory.DictFactory):
    """
        This does not need to be called directly, and instead you should use
    create_tgroups_agency (defined below) in order to call this.

    We use this to help organize factories / the ability to override and set
    values for the tgroups agency data which is spread across many rows.

    Note: Any value that is "None" will not be included in the created
          tgroups records (empty strings, or strings of values like "null" will be)
    """

    AgencyName = factory.Faker("agency_name")
    AgencyCode = ""  # see: create_tgroups_agency for how this gets set
    AgencyCFDA = factory.Faker("random_int", min=1, max=99)
    AgencyDownload = factory.Faker("random_int", min=1, max=3)
    AgencyNotify = factory.Faker("random_int", min=1, max=3)
    AgencyEnroll = ""  # see: create_tgroups_agency for how this gets set

    AgencyContactName = factory.Faker("name")
    AgencyContactAddress1 = factory.Faker("street_address")
    AgencyContactAddress2 = factory.Maybe(
        decider=factory.LazyAttribute(lambda s: random.random() > 0.5),
        yes_declaration=factory.Sequence(lambda n: f"Room {n}"),
        no_declaration="NULL",
    )
    AgencyContactCity = factory.Faker("city")
    AgencyContactState = factory.Faker("state_abbr")
    AgencyContactZipCode = factory.Faker("postcode")
    AgencyContactTelephone = Generators.PhoneNumber
    AgencyContactEMail = factory.Faker("email")
    AgencyContactEMail2 = sometimes_none(factory.Faker("email"))

    ldapGp = ""  # see: create_tgroups_agency for how this gets set
    description = factory.LazyAttribute(lambda g: g.AgencyName)
    label = factory.LazyAttribute(lambda g: g.AgencyName)
    multilevel = sometimes_none("TRUE", none_chance=0.8)

    HasS2SCert = sometimes_none(factory.Faker("yn_boolean"), none_chance=0.8)
    ViewPkgsInGracePeriod = sometimes_none(factory.Faker("yn_boolean"), none_chance=0.8)
    multiproject = sometimes_none(factory.Faker("yn_boolean"), none_chance=0.8)
    ImageWS = sometimes_none(factory.Faker("yn_boolean"), none_chance=0.8)
    ValidationWS = sometimes_none(factory.Faker("yn_boolean"), none_chance=0.8)


def create_tgroups_agency(
    agency_code: str,
    is_deleted: bool = False,
    is_already_processed: bool = False,
    deleted_fields: set | None = None,
    already_processed_fields: set | None = None,
    **kwargs,
) -> list[staging.tgroups.Tgroups]:
    # The agency_code value is actually just the first bit (the top-level agency)
    kwargs.setdefault("AgencyCode", agency_code.split("-")[-1])
    kwargs.setdefault("AgencyEnroll", agency_code)
    kwargs.setdefault("ldapGp", agency_code)

    field_values = StagingTgroupsAgencyFactory.build(**kwargs)

    groups = []

    field_prefix = f"Agency-{agency_code}-"

    if already_processed_fields is None:
        already_processed_fields = set()

    if deleted_fields is None:
        deleted_fields = set()

    for field_name, value in field_values.items():
        if value is None:
            continue

        is_field_already_processed = is_already_processed or field_name in already_processed_fields
        is_field_deleted = is_deleted or field_name in deleted_fields

        tgroup = StagingTgroupsFactory.create(
            keyfield=field_prefix + field_name,
            value=str(value),
            is_deleted=is_field_deleted,
            already_transformed=is_field_already_processed,
        )

        groups.append(tgroup)

    return groups


class OpportunityChangeAuditFactory(BaseFactory):
    class Meta:
        model = opportunity_models.OpportunityChangeAudit

    opportunity = factory.SubFactory(OpportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda s: s.opportunity.opportunity_id)


class UserFactory(BaseFactory):
    class Meta:
        model = user_models.User

    user_id = Generators.UuidObj


class LinkExternalUserFactory(BaseFactory):
    class Meta:
        model = user_models.LinkExternalUser

    link_external_user_id = Generators.UuidObj
    external_user_id = Generators.UuidObj

    user = factory.SubFactory(UserFactory)
    user_id = factory.LazyAttribute(lambda s: s.user.user_id)

    external_user_type = factory.fuzzy.FuzzyChoice(ExternalUserType)

    email = factory.Faker("email")


class UserNotificationLogFactory(BaseFactory):
    class Meta:
        model = user_models.UserNotificationLog

    user_notification_log_id = Generators.UuidObj

    user = factory.SubFactory(UserFactory)
    user_id = factory.LazyAttribute(lambda s: s.user.user_id)

    notification_reason = "test"
    notification_sent = True


class LoginGovStateFactory(BaseFactory):
    class Meta:
        model = user_models.LoginGovState

    login_gov_state_id = Generators.UuidObj
    nonce = Generators.UuidObj


class ExtractMetadataFactory(BaseFactory):
    class Meta:
        model = extract_models.ExtractMetadata

    extract_type = factory.fuzzy.FuzzyChoice(ExtractType)
    file_name = factory.Faker("file_name")
    file_path = "s3://bucket/key"
    file_size_bytes = factory.Faker("random_int", min=1, max=1000000)


class UserTokenSessionFactory(BaseFactory):
    class Meta:
        model = user_models.UserTokenSession

    user = factory.SubFactory(UserFactory)
    user_id = factory.LazyAttribute(lambda s: s.user.user_id)

    token_id = Generators.UuidObj

    expires_at = factory.Faker("date_time_between", start_date="+1d", end_date="+10d")

    is_valid = True


class UserSavedOpportunityFactory(BaseFactory):
    class Meta:
        model = user_models.UserSavedOpportunity

    user = factory.SubFactory(UserFactory)
    user_id = factory.LazyAttribute(lambda o: o.user.user_id)

    opportunity = factory.SubFactory(OpportunityFactory)
    opportunity_id = factory.LazyAttribute(lambda o: o.opportunity.opportunity_id)


class UserSavedSearchFactory(BaseFactory):
    class Meta:
        model = user_models.UserSavedSearch

    user = factory.SubFactory(UserFactory)
    user_id = factory.LazyAttribute(lambda s: s.user.user_id)

    saved_search_id = Generators.UuidObj

    name = factory.Faker("sentence")

    search_query = factory.LazyAttribute(lambda s: s.search_query)

    last_notified_at = factory.Faker("date_time_between", start_date="-5y", end_date="-3y")

    searched_opportunity_ids = factory.LazyAttribute(lambda _: random.sample(range(1, 1000), 5))
