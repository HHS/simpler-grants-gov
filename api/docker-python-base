
FROM public.ecr.aws/docker/library/alpine:3.22.2 AS alpine-builder

ARG PYTHON_VERSION=3.13.8
ARG PY_MM=3.13
ARG POETRY_VERSION=2.2.1
ARG PIP_VERSION=25.2
ARG ENABLE_UPX=0

SHELL ["/bin/sh", "-eux", "-c"]

# Create python-version.txt file to be used by downstream Dockerfiles
RUN echo "${PY_MM}" > /python-version.txt

RUN apk add --no-cache \
      build-base \
      wget \
      tar \
      xz \
      bzip2-dev \
      zlib-dev \
      openssl-dev \
      libffi-dev \
      sqlite-dev \
      readline-dev \
      ncurses-dev \
      xz-dev \
      gdbm-dev \
      linux-headers \
      ca-certificates

WORKDIR /tmp
RUN wget -q https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && tar xzf Python-${PYTHON_VERSION}.tgz
WORKDIR /tmp/Python-${PYTHON_VERSION}
RUN ./configure \
        --prefix=/usr/local \
        --with-lto \
        --enable-shared \
        --with-ensurepip=install \
        LDFLAGS="-Wl,-rpath=/usr/local/lib" && \
    make -j"$(nproc)" && \
    make install
WORKDIR /tmp
RUN rm -rf "Python-${PYTHON_VERSION}" "Python-${PYTHON_VERSION}.tgz" && \
    python3 -m pip install --no-cache-dir --upgrade "pip==${PIP_VERSION}" && \
    ln -sf /usr/local/bin/python3 /usr/local/bin/python && \
    ln -sf /usr/local/bin/pip3 /usr/local/bin/pip && \
    pip3 install --no-cache-dir poetry==${POETRY_VERSION}


# Remove pip from runtime (keep Poetry)
RUN rm -rf /usr/local/lib/python${PY_MM}/site-packages/pip* \
    /usr/local/lib/python${PY_MM}/site-packages/setuptools* \
    /usr/local/lib/python${PY_MM}/site-packages/_distutils_hack \
    /usr/local/bin/pip* \
    /usr/local/bin/easy_install* \
    /root/.cache

# Prune stdlib
RUN rm -rf \
      /usr/local/lib/python${PY_MM}/test \
      /usr/local/lib/python${PY_MM}/ensurepip \
      /usr/local/lib/python${PY_MM}/idlelib \
      /usr/local/lib/python${PY_MM}/tkinter \
      /usr/local/lib/python${PY_MM}/turtledemo \
      /usr/local/lib/python${PY_MM}/distutils \
      /usr/local/lib/python${PY_MM}/lib2to3 \
      /usr/local/lib/python${PY_MM}/venv

# Compile stdlib to optimized bytecode and drop sources
RUN python3 -m compileall -f -o 1 /usr/local/lib/python${PY_MM}


# Strip Python binary and extension modules
RUN strip --strip-unneeded /usr/local/bin/python${PY_MM} || true; \
    for f in /usr/local/lib/libpython${PY_MM}.so*; do strip --strip-unneeded "$f" || true; done; \
    find /usr/local/lib/python${PY_MM}/lib-dynload -type f -name "*.so" -exec strip --strip-unneeded {} + 2>/dev/null || true


# Collect runtime shared libraries for scratch stage
RUN set -eux; \
    apk add --no-cache pax-utils; \
    mkdir -p /runtime-root; \
    libs="$(find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec scanelf --needed --nobanner --format '%n#p' '{}' ';' \
      | tr ',' '\n' \
      | sed 's/.*#//' \
      | sort -u)"; \
    for lib in $libs; do \
      f="$(find /lib /usr/lib -name "$lib" -print -quit)"; \
      [ -n "$f" ] || continue; \
      d="/runtime-root$(dirname "$f")"; \
      mkdir -p "$d"; \
      cp -a "$f" "$d/"; \
      if [ -L "$f" ]; then \
        tf="$(readlink -f "$f")"; \
        td="/runtime-root$(dirname "$tf")"; \
        mkdir -p "$td"; \
        cp -a "$tf" "$td/"; \
      fi; \
    done; \
    # Always include dynamic linker and busybox shell for downstream RUN steps \
    for p in /lib/ld-musl-*.so* /bin/busybox /bin/sh; do \
      [ -e "$p" ] || continue; \
      d="/runtime-root$(dirname "$p")"; mkdir -p "$d"; cp -a "$p" "$d/"; \
    done; \
    # CA bundle and time zone data \
    mkdir -p /runtime-root/etc/ssl/certs; \
    if [ -f /etc/ssl/certs/ca-certificates.crt ]; then cp -a /etc/ssl/certs/ca-certificates.crt /runtime-root/etc/ssl/certs/; fi; \
    if [ -d /usr/share/zoneinfo ]; then mkdir -p /runtime-root/usr/share; cp -a /usr/share/zoneinfo /runtime-root/usr/share/; fi; \
    # Ensure minimal passwd/group/shadow files exist for BusyBox utilities \
    mkdir -p /runtime-root/etc /runtime-root/root; \
    [ -f /runtime-root/etc/passwd ] || echo 'root:x:0:0:root:/root:/bin/sh' > /runtime-root/etc/passwd; \
    [ -f /runtime-root/etc/group ] || echo 'root:x:0:' > /runtime-root/etc/group; \
    [ -f /runtime-root/etc/shadow ] || echo 'root:!:::::::' > /runtime-root/etc/shadow; \
    [ -f /runtime-root/etc/gshadow ] || echo 'root:!:::' > /runtime-root/etc/gshadow


# Scratch runtime minimal (optional experiment)
FROM scratch AS scratch-minimal
ARG PY_MM=3.13
LABEL org.opencontainers.image.source="https://github.com/HHS/simpler-grants-gov"

# Copy python-version.txt for downstream Dockerfiles to use
COPY --from=alpine-builder /python-version.txt /python-version.txt

# Python runtime
COPY --from=alpine-builder /usr/local/bin/python${PY_MM} /usr/local/bin/python${PY_MM}
COPY --from=alpine-builder /usr/local/bin/python3 /usr/local/bin/python3
COPY --from=alpine-builder /usr/local/bin/python /usr/local/bin/python
COPY --from=alpine-builder /usr/local/bin/poetry /usr/local/bin/poetry
COPY --from=alpine-builder /usr/local/lib/python${PY_MM}/ /usr/local/lib/python${PY_MM}/
COPY --from=alpine-builder /usr/local/lib/libpython${PY_MM}.so* /usr/local/lib/

# Copy collected runtime libraries and essentials (busybox /bin/sh, musl ld, CA bundle, tzdata)
COPY --from=alpine-builder /runtime-root/ /

ENV PATH="/usr/local/bin:/usr/bin:/bin" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LD_LIBRARY_PATH="/usr/local/lib:/lib:/usr/lib" \
    SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt" \
    SSL_CERT_DIR="/etc/ssl/certs" \
    TMPDIR="/tmp"

# Ensure shell is available for downstream Dockerfiles
SHELL ["/bin/sh", "-c"]
