FROM public.ecr.aws/amazonlinux/amazonlinux:2023 AS builder

LABEL org.opencontainers.image.source=https://github.com/HHS/simpler-grants-gov

ARG PYTHON_VERSION=3.13.8
ARG PY_MM=3.13
ARG POETRY_VERSION=2.2.1
ARG PIP_VERSION=25.2

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN set -euo pipefail; \
    dnf -q -y makecache; \
    yum install -y --allowerasing \
      gcc-11.5.0-5.amzn2023.0.5 \
      libstdc++-14.2.1-7.amzn2023.0.2 \
      make-1:4.3-5.amzn2023.0.2 \
      wget-1.21.3-1.amzn2023.0.4 \
      tar-2:1.34-1.amzn2023.0.4 \
      gzip-1.12-1.amzn2023.0.1 \
      openssl-devel-1:3.2.2-1.amzn2023.0.2\
      zlib-devel-1.2.11-33.amzn2023.0.5 \
      libffi-devel-3.4.4-1.amzn2023.0.1 \
      sqlite-devel-3.40.0-1.amzn2023.0.6 \
      bzip2-devel-1.0.8-6.amzn2023.0.2 \
      readline-devel-8.1-2.amzn2023.0.2 \
      ncurses-devel-6.2-4.20200222.amzn2023.0.6 \
      xz-devel-5.2.5-9.amzn2023.0.2 \
      gdbm-devel-1:1.19-2.amzn2023.0.2 \
      shadow-utils-2:4.9-12.amzn2023.0.4 \
      graphviz-2.44.0-25.amzn2023.0.7 \
      fontconfig \
      gdk-pixbuf2 \
      pango \
      curl-8.11.1-4.amzn2023.0.1 \
    && yum update -y --allowerasing \
         libtiff \
         libgs \
         openssl-libs \
         openssl-fips-provider-latest \
         python3-pip-wheel \
    && yum clean all && rm -rf /var/cache/yum

# Download and build Python with optimizations
WORKDIR /tmp
RUN wget -q https://www.python.org/ftp/python/${PYTHON_VERSION}/Python-${PYTHON_VERSION}.tgz && tar xzf Python-${PYTHON_VERSION}.tgz
WORKDIR /tmp/Python-${PYTHON_VERSION}
RUN ./configure \
        --prefix=/usr/local \
        --enable-optimizations \
        --enable-shared \
        --with-ensurepip=install \
        LDFLAGS="-Wl,-rpath=/usr/local/lib" && \
    make -j"$(nproc)" && \
    make install
WORKDIR /tmp
# Clean Python build artifacts, ensure pip version, create symlinks, and install Poetry in one layer
RUN rm -rf "Python-${PYTHON_VERSION}" "Python-${PYTHON_VERSION}.tgz" && \
    python3 -m pip install --no-cache-dir --upgrade "pip==${PIP_VERSION}" && \
    ln -sf /usr/local/bin/python3 /usr/local/bin/python && \
    ln -sf /usr/local/bin/pip3 /usr/local/bin/pip && \
    pip3 install --no-cache-dir poetry==${POETRY_VERSION}

# Provide lightweight shims for 'cat' and 'ls' so subprocess can always find them
RUN printf '%s\n' '#!/usr/bin/bash' 'exec /usr/bin/cat "$@"' > /usr/local/bin/cat && chmod +x /usr/local/bin/cat && \
    printf '%s\n' '#!/usr/bin/bash' 'exec /usr/bin/ls  "$@"' > /usr/local/bin/ls  && chmod +x /usr/local/bin/ls

# Remove pip from runtime (keep Poetry, remove vulnerable pip)
RUN rm -rf /usr/local/lib/python${PY_MM}/site-packages/pip* \
    /usr/local/lib/python${PY_MM}/site-packages/setuptools* \
    /usr/local/lib/python${PY_MM}/site-packages/_distutils_hack \
    /usr/local/bin/pip* \
    /usr/local/bin/easy_install* \
    /root/.cache

# Strip binaries to reduce size
RUN find /usr/local -type f -executable -exec strip --strip-all {} + 2>/dev/null || true && \
    find /usr/local -name "*.so*" -exec strip --strip-all {} + 2>/dev/null || true

# Collect required shared libraries for Python
RUN mkdir -p /runtime/python-libs && \
    ldd /usr/local/bin/python${PY_MM} | grep "=>" | awk '{print $3}' | grep -v "^$" | xargs -I '{}' cp '{}' /runtime/python-libs/ 2>/dev/null || true && \
    for lib in /lib64/ld-*.so.* /lib/ld-*.so.*; do [ -f "$lib" ] && cp "$lib" /runtime/python-libs/; done 2>/dev/null || true
# Also copy generic dynamic loader symlinks required by execve on common arches
RUN for link in /lib64/ld-linux-x86-64.so.2 /lib/ld-linux-aarch64.so.1; do \
      [ -e "$link" ] && cp -P "$link" /runtime/python-libs/ || true; \
    done

# Also collect libraries required by Python extension modules (e.g., zlib, bz2, lzma, ssl, sqlite3)
RUN shopt -s nullglob; for so in "/usr/local/lib/python${PY_MM}/lib-dynload/"*.so; do \
      ldd "$so" 2>/dev/null | grep "=>" | awk '{print $3}' | grep -v "^$" | xargs -I '{}' cp '{}' /runtime/python-libs/ 2>/dev/null || true; \
    done
# Explicitly include common GCC/C++ runtime libraries needed by native wheels (e.g., pydantic-core, numpy)
RUN for lib in /lib64/libgcc_s.so.1 /usr/lib64/libgcc_s.so.1 /lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6; do \
      [ -f "$lib" ] && cp "$lib" /runtime/python-libs/ || true; \
    done
# Explicitly include essential glibc runtime libraries commonly required by C extensions
RUN for lib in /lib64/libpthread.so.0 /usr/lib64/libpthread.so.0 \
               /lib64/libc.so.6 /usr/lib64/libc.so.6 \
               /lib64/libm.so.6 /usr/lib64/libm.so.6 \
               /lib64/libdl.so.2 /usr/lib64/libdl.so.2 \
               /lib64/librt.so.1 /usr/lib64/librt.so.1 \
               /lib64/libutil.so.1 /usr/lib64/libutil.so.1 \
               /lib64/libnsl.so.1 /usr/lib64/libnsl.so.1 \
               /lib64/libcrypt.so.1 /usr/lib64/libcrypt.so.1; do \
      [ -f "$lib" ] && cp "$lib" /runtime/python-libs/ || true; \
    done
# Resolver and NSS libraries required by network clients (e.g., psycopg binary)
RUN for lib in /lib64/libresolv.so.2 /usr/lib64/libresolv.so.2 \
               /lib64/libnss_dns.so.2 /usr/lib64/libnss_dns.so.2 \
               /lib64/libnss_files.so.2 /usr/lib64/libnss_files.so.2; do \
      [ -f "$lib" ] && cp "$lib" /runtime/python-libs/ || true; \
    done


# Collect only the required libraries for minimal runtime binaries
RUN mkdir -p /runtime/system-libs && \
    for binary in /usr/bin/sh /usr/bin/bash /usr/sbin/useradd /usr/bin/ls /usr/bin/cat /usr/bin/curl /usr/bin/wget; do \
        [ -f "$binary" ] && ldd "$binary" 2>/dev/null | grep "=>" | awk '{print $3}' | grep -v "^$" | xargs -I '{}' cp '{}' /runtime/system-libs/ 2>/dev/null || true; \
    done

# Collect Graphviz-related libraries required at runtime (binaries and plugins)
RUN mkdir -p /runtime/graphviz-libs && \
    for binary in /usr/bin/dot /usr/bin/neato /usr/bin/fdp /usr/bin/sfdp /usr/bin/twopi /usr/bin/circo /usr/bin/fc-cache /usr/bin/gdk-pixbuf-query-loaders /usr/bin/pango-querymodules; do \
        [ -f "$binary" ] && ldd "$binary" 2>/dev/null | grep "=>" | awk '{print $3}' | grep -v "^$" | xargs -I '{}' cp '{}' /runtime/graphviz-libs/ 2>/dev/null || true; \
    done && \
    shopt -s nullglob; for so in /usr/lib64/graphviz/*.so; do \
        ldd "$so" 2>/dev/null | grep "=>" | awk '{print $3}' | grep -v "^$" | xargs -I '{}' cp '{}' /runtime/graphviz-libs/ 2>/dev/null || true; \
    done

FROM scratch

# Ensure /bin/sh exists for RUN in this stage
COPY --from=builder /usr/bin/sh /bin/sh

# Copy Python runtime
COPY --from=builder /usr/local /usr/local

# Copy Python shared libraries (including dynamic loader)
COPY --from=builder /runtime/python-libs /lib
COPY --from=builder /runtime/python-libs /lib64

# Copy minimal required system binaries
COPY --from=builder /usr/bin/sh /usr/bin/sh
COPY --from=builder /usr/bin/bash /usr/bin/bash
COPY --from=builder /usr/sbin/useradd /usr/sbin/useradd
COPY --from=builder /usr/bin/ls /usr/bin/ls
COPY --from=builder /usr/bin/cat /usr/bin/cat
COPY --from=builder /usr/bin/curl /usr/bin/curl
COPY --from=builder /usr/bin/wget /usr/bin/wget
# Additional core utilities required by pip/distro
COPY --from=builder /usr/bin/uname /usr/bin/uname
COPY --from=builder /usr/bin/grep /usr/bin/grep

# Graphviz and related helper binaries (optional in runtime, used in dev)
COPY --from=builder /usr/bin/dot /usr/bin/dot
COPY --from=builder /usr/bin/neato /usr/bin/neato
COPY --from=builder /usr/bin/fdp /usr/bin/fdp
COPY --from=builder /usr/bin/sfdp /usr/bin/sfdp
COPY --from=builder /usr/bin/twopi /usr/bin/twopi
COPY --from=builder /usr/bin/circo /usr/bin/circo
COPY --from=builder /usr/bin/fc-cache /usr/bin/fc-cache

# Copy only the specific system libraries required by the selected binaries
COPY --from=builder /runtime/system-libs /usr/lib64
# Include Graphviz/Pango/Cairo/etc. libs discovered via ldd
COPY --from=builder /runtime/graphviz-libs /usr/lib64
COPY --from=builder /runtime/graphviz-libs /lib64
# Explicitly include shared libraries needed by coreutils/grep and their deps
COPY --from=builder /lib64/libselinux.so.1 /lib64/libselinux.so.1
COPY --from=builder /usr/lib64/libselinux.so.1 /usr/lib64/libselinux.so.1
COPY --from=builder /lib64/libpcre2-8.so.0 /lib64/libpcre2-8.so.0
COPY --from=builder /usr/lib64/libpcre2-8.so.0 /usr/lib64/libpcre2-8.so.0
# Provide dynamic linker cache/config so glibc can resolve libs in scratch stage
COPY --from=builder /etc/ld.so.cache /etc/ld.so.cache
COPY --from=builder /etc/ld.so.conf /etc/ld.so.conf
COPY --from=builder /etc/ld.so.conf.d /etc/ld.so.conf.d

# Graphviz plugins and shared data
COPY --from=builder /usr/lib64/graphviz /usr/lib64/graphviz
COPY --from=builder /usr/share/graphviz /usr/share/graphviz
# Fonts and fontconfig
COPY --from=builder /etc/fonts /etc/fonts
COPY --from=builder /usr/share/fonts /usr/share/fonts

# Copy essential system files
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group
# Include shadow since we create users in this stage
COPY --from=builder /etc/shadow /etc/shadow
# Copy CA certificates bundle for TLS verification
COPY --from=builder /etc/ssl/certs /etc/ssl/certs
COPY --from=builder /etc/pki/ca-trust /etc/pki/ca-trust

# Create necessary directories
COPY --from=builder /tmp /tmp

# Use bash as the shell for RUN in this stage to avoid /bin/sh resolution issues
SHELL ["/usr/bin/bash", "-lc"]

# Set environment for Python
ENV PATH="/usr/local/bin:/usr/bin:/usr/sbin:/bin" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    LD_LIBRARY_PATH="/lib:/lib64:/usr/lib64:/usr/local/lib" \
    SSL_CERT_FILE="/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem" \
    SSL_CERT_DIR="/etc/ssl/certs:/etc/pki/ca-trust/extracted/pem" \
    TMPDIR="/tmp"