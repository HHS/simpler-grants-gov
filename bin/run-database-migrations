#!/bin/bash
# -----------------------------------------------------------------------------
# Run database migrations
# 1. Update the application's task definition with the latest build, but
#    do not update the service
# 2. Run the "db-migrate" command in the container as a new task
#
# Positional parameters:
#   app_name (required) – the name of subdirectory of /infra that holds the
#     application's infrastructure code.
#   image_tag (required) – the tag of the latest build
#   environment (required) – the name of the application environment (e.g. dev,
#     staging, prod)
# -----------------------------------------------------------------------------

set -euo pipefail

app_name="$1"
image_tag="$2"
environment="$3"

echo "=================="
echo "Running migrations"
echo "=================="
echo "Input parameters"
echo "  app_name=$app_name"
echo "  image_tag=$image_tag"
echo "  environment=$environment"
echo
echo "Step 0. Check if app has a database"

terraform -chdir="infra/$app_name/app-config" init > /dev/null
terraform -chdir="infra/$app_name/app-config" apply -auto-approve > /dev/null
has_database=$(terraform -chdir="infra/$app_name/app-config" output -raw has_database)
if [ "$has_database" = "false" ]; then
  echo "Application does not have a database, no migrations to run"
  exit 0
fi

db_migrator_user=$(terraform -chdir="infra/$app_name/app-config" output -json environment_configs | jq -r ".$environment.database_config.migrator_username")

./bin/terraform-init "infra/$app_name/service" "$environment"
migrator_role_arn=$(terraform -chdir="infra/$app_name/service" output -raw migrator_role_arn)

echo
echo "::group::Step 1. Update task definition without updating service"

TF_CLI_ARGS_apply="-input=false -auto-approve -target=module.service.aws_ecs_task_definition.app -var=image_tag=$image_tag" make infra-update-app-service APP_NAME="$app_name" ENVIRONMENT="$environment"

echo "::endgroup::"
echo
echo 'Step 2. Run "db-migrate" command'

command='["db-migrate"]'

# Indent the later lines more to make the output of run-command prettier
environment_variables=$(cat << EOF
[{ "name" : "DB_USER", "value" : "$db_migrator_user" }]
EOF
)

./bin/run-command --task-role-arn "$migrator_role_arn" --environment-variables "$environment_variables" "$app_name" "$environment" "$command"
