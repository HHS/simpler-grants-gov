name: Update Database ERD Diagrams and OpenAPI Docs

on:
  workflow_dispatch:
  schedule:
    # Runs daily at 9 AM EST
    - cron: '0 14 * * *'

defaults:
  run:
    working-directory: ./api

jobs:
  update-openapi-docs:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history so we can create branches properly

      - name: Build Docker images
        run: make build

      - name: Start database
        run: make start-db

      - name: Create ERD diagram
        run: make create-erds

      - name: Update OpenAPI spec
        run: make openapi-spec

      - name: Commit & push changes
        id: commit
        working-directory: .
        run: |
          git config user.name "nava-platform-bot"
          git config user.email "platform-admins@navapbc.com"

          BRANCH="nava-platform-bot/update-erd-and-openapi-docs"
          echo "Branch name: $BRANCH"

          git fetch origin main
          git fetch origin "$BRANCH" || true

          # Check if branch exists remotely and use it, otherwise create from main
          if git ls-remote --exit-code --heads origin "$BRANCH" >/dev/null 2>&1; then
            echo "Remote branch exists, checking it out"
            git checkout -b "$BRANCH" "origin/$BRANCH"
          else
            echo "Remote branch does not exist, creating from main"
            git checkout -b "$BRANCH" origin/main
          fi

          # Show file status before adding
          echo "Files before git add:"
          ls -lh api/openapi.generated.yml || echo "openapi.generated.yml not found"
          ls -lh documentation/api/database/erds/*.png || echo "ERD files not found"

          # Add files from both api/ and documentation/ directories
          git add api/openapi.generated.yml documentation/api/database/erds/*.png

          echo "Git status after adding files:"
          git status

          echo "Checking for staged changes:"
          if git diff --cached --quiet; then
            echo "No changes detected in staged files"
            echo "changed=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "Changes detected! Showing diff:"
          git diff --cached --stat

          git commit -m "Update ERD Diagrams and OpenAPI Specs"
          git push --set-upstream origin "$BRANCH"
          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "Changes committed and pushed successfully"

      - name: Debug - Check outputs
        working-directory: .
        run: |
          echo "Changed value: ${{ steps.commit.outputs.changed }}"
          echo "Condition will be: ${{ steps.commit.outputs.changed == 'true' }}"

      - name: Create Pull Request (only if none exists)
        if: steps.commit.outputs.changed == 'true'
        working-directory: .
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          API="https://api.github.com/repos/${{ github.repository }}/pulls"
          BRANCH="nava-platform-bot/update-erd-and-openapi-docs"

          echo "Checking for existing PR..."
          echo "API endpoint: $API?head=${{ github.repository_owner }}:$BRANCH&base=main"

          # Check if a PR already exists
          PR_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                        -H "Accept: application/vnd.github+json" \
                        "$API?head=${{ github.repository_owner }}:$BRANCH&base=main")

          echo "PR check response:"
          echo "$PR_RESPONSE" | jq '.'

          PR_NUM=$(echo "$PR_RESPONSE" | jq '.[0].number // empty')

          if [ -n "$PR_NUM" ]; then
            echo "PR #$PR_NUM already exists â€” skipping creation."
            exit 0
          fi

          echo "No existing PR found, creating new PR..."

          # Create a new PR if none exists
          CREATE_RESPONSE=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "$API" \
               -d "$(jq -n \
                     --arg title "Update Database ERD Diagrams and OpenAPI Docs" \
                     --arg head "$BRANCH" \
                     --arg base "main" \
                     --arg body "Automated update of ERD diagrams and OpenAPI specs." \
                     '{title: $title, head: $head, base: $base, body: $body}')")

          echo "PR creation response:"
          echo "$CREATE_RESPONSE" | jq '.'

          PR_URL=$(echo "$CREATE_RESPONSE" | jq -r '.html_url // empty')
          if [ -n "$PR_URL" ]; then
            echo "Successfully created PR: $PR_URL"
          else
            echo "Failed to create PR"
            exit 1
          fi
