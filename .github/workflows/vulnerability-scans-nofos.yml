# GitHub Actions CI workflow that runs vulnerability scans on the application's Docker image
# to ensure images built are secure before they are deployed.

name: Vulnerability Scans

on:
  workflow_call:
    inputs:
      bypass_ignore:
        description: "controls if we want to not honor the scan ignore files during this run"
        required: false
        type: boolean
        default: false

jobs:
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Clear ignore files
        # If there's an exact match in cache, skip build entirely
        if: inputs.bypass_ignore == true
        run: |
          rm .trivyignore

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Restore cached trivy vulnerability and Java DBs
        id: trivy-cache
        uses: actions/cache/restore@v4
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: trivy-cache-${{ steps.date.outputs.date }}

      # Download and extract the vulnerability DB and Java DB
      # This is based on the instructions here:
      # https://github.com/aquasecurity/trivy-action/?tab=readme-ov-file#updating-caches-in-the-default-branch

      - name: Setup oras
        if: steps.trivy-cache.outputs.cache-hit != 'true'
        uses: oras-project/setup-oras@v1

      - name: Download and extract the vulnerability DB
        if: steps.trivy-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.cache/trivy/db"
          oras pull ghcr.io/aquasecurity/trivy-db:2
          tar -xzf db.tar.gz -C "$GITHUB_WORKSPACE/.cache/trivy/db"
          rm db.tar.gz

      - name: Download and extract the Java DB
        if: steps.trivy-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$GITHUB_WORKSPACE/.cache/trivy/java-db"
          oras pull ghcr.io/aquasecurity/trivy-java-db:1
          tar -xzf javadb.tar.gz -C "$GITHUB_WORKSPACE/.cache/trivy/java-db"
          rm javadb.tar.gz

      - name: Cache DBs
        if: steps.trivy-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: trivy-cache-${{ steps.date.outputs.date }}

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: nofos-image-${{ github.sha }}-${{ github.run_id }}

      - name: Load cached Docker image
        run: docker load < /tmp/docker-image.tar

      - name: Run Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: nofos:latest
          format: table
          exit-code: 1
          ignore-unfixed: true
          vuln-type: os
          scanners: vuln,secret
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
          # PyJWT has an example with a fake JWT that Trivy flags.
          # see: https://github.com/aquasecurity/trivy/discussions/5772
          TRIVY_SKIP_FILES: "/app/.venv/lib/python*/site-packages/PyJWT-*.dist-info/METADATA"

      - name: Save output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          echo "View results in GitHub Action logs" >> "$GITHUB_STEP_SUMMARY"

  anchore-scan:
    name: Anchore Scan
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Clear ignore files
        # If there's an exact match in cache, skip build entirely
        if: inputs.bypass_ignore == true
        run: |
          grep -v "\- vulnerability:" .grype.yml > new.grype.yml
          rm .grype.yml
          mv new.grype.yml .grype.yml

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: nofos-image-${{ github.sha }}-${{ github.run_id }}

      - name: Load cached Docker image
        run: docker load < /tmp/docker-image.tar

      - name: Run Anchore vulnerability scan (json)
        if: always() # Runs even if there is a failure
        uses: anchore/scan-action@v6
        id: anchore-scan-json
        with:
          image: nofos:latest
          output-format: json
          fail-build: true
          severity-cutoff: medium

      - name: Run Anchore vulnerability scan (table)
        if: always() # Runs even if there is a failure
        uses: anchore/scan-action@v6
        with:
          image: nofos:latest
          output-format: table
          fail-build: true
          severity-cutoff: medium

      - name: Print output to workflow summary
        if: always() # Runs even if there is a failure
        run: |
          jq '.matches | map(.artifact | { name, version, location: .locations[0].path })' ${{ steps.anchore-scan-json.outputs.json }}

  dockle-scan:
    name: Dockle Scan
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Restore cached Docker image
        uses: actions/cache/restore@v4
        with:
          path: /tmp/docker-image.tar
          key: nofos-image-${{ github.sha }}-${{ github.run_id }}

      - name: Load cached Docker image
        run: docker load < /tmp/docker-image.tar

      # Dockle doesn't allow you to have an ignore file for the DOCKLE_ACCEPT_FILES
      # variable, this will save the variable in this file to env for Dockle
      - name: Set any acceptable Dockle files
        run: |
          if grep -q "^DOCKLE_ACCEPT_FILES=.*" .dockleconfig; then
            grep -s '^DOCKLE_ACCEPT_FILES=' .dockleconfig >> "$GITHUB_ENV"
          fi

      - name: Create temporary .dockleignore
        run: echo "DKL-DI-0006" > .dockleignore

      - name: Run Dockle container linter
        uses: erzz/dockle-action@v1.4.0
        with:
          image: nofos:latest
          exit-code: "1"
          failure-threshold: WARN
          accept-filenames: ${{ env.DOCKLE_ACCEPT_FILES }}

      - name: Save output to workflow summary
        if: failure() # Only runs if there is a failure
        run: |
          {
            echo '```json'
            cat dockle-report.json
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
