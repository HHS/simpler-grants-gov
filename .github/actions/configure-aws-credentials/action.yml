name: "Configure AWS Credentials"
description: "Configure AWS Credentials for an AWS account so that |
  the GitHub Actions workflow can access AWS resources. |
  This is a wrapper around https://github.com/aws-actions/configure-aws-credentials |
  that first determines the account, role, and region. |
  Chose one of the following three authentication options: |
  1. Authenticate by account_name |
  2. Authenticate by network_name |
  3. Authenticate by app_name and environment."
inputs:
  account_name:
    description: "Name of account, must match <ACCOUNT_NAME> in <ACCOUNT_NAME>.<ACCOUNT_ID>.s3.tfbackend file in /infra/accounts"
  network_name:
    description: "Name of network, must match <NETWORK_NAME> in <NETWORK_NAME>.s3.tfbackend file in /infra/networks"
  app_name:
    description: "Name of application folder under /infra"
    required: true
  environment:
    description: 'Name of environment (dev, staging, prod) that AWS resources live in, or "shared" for resources that are shared across environments'
runs:
  using: "composite"
  steps:
    - name: Get network name from app and environment
      id: get-network-name
      if: ${{ inputs.app_name && inputs.environment }}
      run: |
        echo "Get network name for app_name=${{ inputs.app_name }} and environment=${{ inputs.environment }}"

        terraform -chdir="infra/${{ inputs.app_name }}/app-config" init > /dev/null
        terraform -chdir="infra/${{ inputs.app_name }}/app-config" apply -auto-approve > /dev/null

        if [[ "${{ inputs.environment }}" == "shared" ]]; then
          network_name=$(terraform -chdir="infra/${{ inputs.app_name }}/app-config" output -raw shared_network_name)
        else
          network_name=$(terraform -chdir="infra/${{ inputs.app_name }}/app-config" output -json environment_configs | jq -r ".${{ inputs.environment }}.network_name")
        fi

        echo "Network name retrieved: ${network_name}"
        echo "network_name=${network_name}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Get account name from network
      id: get-account-name
      if: ${{ inputs.network_name || steps.get-network-name.outputs.network_name }}
      run: |
        network_name="${{ inputs.network_name || steps.get-network-name.outputs.network_name }}"
        echo "Get account name for network: ${network_name}"

        terraform -chdir="infra/project-config" init > /dev/null
        terraform -chdir="infra/project-config" apply -auto-approve > /dev/null
        account_name=$(terraform -chdir="infra/project-config" output -json network_configs | jq -r ".[\"${network_name}\"].account_name")

        echo "Account name retrieved: ${account_name}"
        echo "account_name=${account_name}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Get AWS account authentication details (AWS account, IAM role, AWS region)
      env:
        TF_LOG: INFO
      run: |
        # Get AWS account authentication details (AWS account, IAM role, AWS region)
        # associated with the application environment to figure out which AWS
        # account to log into, which IAM role to assume, and which AWS region to use

        echo "::group::AWS account authentication details"

        account_name="${{ inputs.account_name || steps.get-account-name.outputs.account_name }}"

        terraform -chdir="infra/project-config" init > /dev/null
        terraform -chdir="infra/project-config" apply -auto-approve > /dev/null
        aws_region=$(terraform -chdir="infra/project-config" output -raw default_region)
        echo "aws_region=${aws_region}"
        github_actions_role_name=$(terraform -chdir="infra/project-config" output -raw github_actions_role_name)
        echo "github_actions_role_name=${github_actions_role_name}"

        # Get the account id associated with the account name extracting the
        # ACCOUNT_ID part of the tfbackend file name which looks like
        # <ACCOUNT_NAME>.<ACCOUNT_ID>.s3.tfbackend.
        # The cut command splits the string with period as the delimiter and
        # extracts the second field.
        account_id=$(ls infra/accounts/${account_name}.*.s3.tfbackend | cut -d. -f2)
        echo "account_id=${account_id}"

        aws_role_to_assume="arn:aws:iam::${account_id}:role/${github_actions_role_name}"
        echo "aws_role_to_assume=${aws_role_to_assume}"

        echo "::endgroup::"

        echo "Setting env vars AWS_ROLE_TO_ASSUME and AWS_REGION..."
        echo "AWS_ROLE_TO_ASSUME=${aws_role_to_assume}" >> "$GITHUB_ENV"
        echo "AWS_REGION=${aws_region}" >> "$GITHUB_ENV"
      shell: bash
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ env.AWS_REGION }}
